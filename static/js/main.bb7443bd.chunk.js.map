{"version":3,"sources":["config/constants/ifo.ts","utils/getRpcUrl.ts","utils/addressHelpers.ts","assets/images/arrowRight.svg","assets/images/coinbaseWalletIcon.svg","assets/images/walletConnectIcon.svg","utils/wallet.ts","config/constants/index.ts","utils/contractHelpers.ts","assets/images/metamask.png","config/constants/farms.ts","contexts/Localisation/translationsContext.ts","hooks/useWeb3.ts","hooks/useContract.ts","config/constants/contracts.ts","config/constants/types.ts","config/constants/pools.ts","utils/web3.ts","utils/RequestError.ts","utils/MiniRpcProvider.ts","utils/NetworkConnector.ts","utils/connectors.ts","contexts/RefreshContext.tsx","state/farms/index.ts","state/farmsV2/index.ts","state/toasts/index.ts","state/pools/fetchPoolsUser.ts","state/pools/index.ts","config/constants/teams.ts","state/profile/index.tsx","state/teams/helpers.ts","state/profile/getProfile.ts","state/teams/index.tsx","state/block/index.ts","config/constants/campaigns.ts","state/achievements/index.ts","state/hooks.ts","hooks/useAuth.ts","hooks/useEagerConnect.ts","components/SuspenseWithChunkError/index.tsx","components/ToastListener/index.tsx","components/PageLoader.tsx","App.tsx","utils/web3React.ts","config/localisation/languageCodes.ts","contexts/Localisation/languageContext.tsx","contexts/ThemeContext.tsx","state/index.ts","Providers.tsx","index.tsx"],"names":["ifos","id","address","isActive","name","subTitle","description","launchDate","launchTime","saleAmount","raiseAmount","cakeToBurn","projectSiteUrl","currency","currencyAddress","tokenDecimals","tokenSymbol","releaseBlockNumber","campaignId","nodes","process","getNodeUrl","randomIndex","random","length","getAddress","getCakeAddress","addresses","cake","getMasterChefAddress","masterChef","getMulticallAddress","mulltiCall","getWbnbAddress","wbnb","getLotteryAddress","lottery","getLotteryTicketAddress","lotteryNFT","getPancakeProfileAddress","pancakeProfile","getPancakeRabbitsAddress","pancakeRabbits","getBunnyFactoryAddress","bunnyFactory","getClaimRefundAddress","claimRefund","getPointCenterIfoAddress","pointCenterIfo","getBunnySpecialAddress","bunnySpecial","SUPPORTED_WALLETS","INJECTED","connector","injected","iconURL","INJECTED_ICON_URL","href","color","primary","METAMASK","METAMASK_ICON_URL","mobile","WALLET_CONNECT","walletconnect","WALLETCONNECT_ICON_URL","WALLET_CONNECT_MOBILE","WALLET_LINK","walletlink","COINBASE_ICON_URL","setupNetwork","a","provider","window","ethereum","chainId","request","method","params","toString","console","error","farmsConfig","filter","farm","isCommunity","map","getContract","abi","web3","web3NoAccount","eth","Contract","getBep20Contract","bep20Abi","getIfoContract","ifoAbi","getSouschefContract","config","poolsConfig","find","pool","sousId","poolCategory","PoolCategory","BINANCE","sousChefBnb","sousChef","contractAddress","getPointCenterIfoContract","getCakeContract","cakeAbi","getProfileContract","profileABI","getPancakeRabbitContract","pancakeRabbitsAbi","getBunnyFactoryContract","bunnyFactoryAbi","getBunnySpecialContract","bunnySpecialAbi","getLotteryContract","lotteryAbi","getLotteryTicketContract","lotteryTicketAbi","getMasterchefContract","getFarmV2Contract","farmV2","getClaimRefundContract","claimRefundAbi","YUNA_GOERLI","YUNA_MAIN","farmsV2Config","farmAddress","lpSymbol","lpAddresses","tokenAddresses","quoteTokenSymbol","QuoteToken","ETH","quoteTokenAdresses","contracts","earlyWithdrawalSeconds","CAKE","farms","defaultTranslationState","translations","setTranslations","TranslationsContext","createContext","useWeb3","library","useWeb3React","refEth","useRef","useState","Web3","getWeb3NoAccount","setweb3","useEffect","current","useContract","useMemo","useMasterchef","syrup","busd","ust","pools","tokenName","tokenAddress","stakingTokenName","stakingTokenAddress","CORE","projectLink","harvest","tokenPerBlock","sortOrder","isFinished","RPC_URL","getRpcUrl","httpProvider","providers","HttpProvider","timeout","RequestError","message","code","data","Error","MiniRpcProvider","url","batchWaitTimeMs","isMetaMask","host","path","nextId","batchTimeoutId","batch","clearBatch","fetch","headers","accept","body","JSON","stringify","item","response","forEach","reject","ok","status","statusText","json","byKey","reduce","memo","newMemo","result","resolve","sendAsync","callback","then","jsonrpc","catch","promise","Promise","push","setTimeout","this","parsed","URL","pathname","NetworkConnector","urls","defaultChainId","invariant","Object","keys","supportedChainIds","k","Number","currentChainId","accumulator","account","AbstractConnector","NETWORK_URL","NETWORK_CHAIN_ID","parseInt","InjectedConnector","WalletConnectConnector","rpc","bridge","qrcode","WalletLinkConnector","appName","appLogoUrl","connectorsByName","ConnectorNames","Injected","WalletConnect","currentProvider","RefreshContext","React","slow","fast","RefreshContextProvider","children","setSlow","setFast","interval","setInterval","prev","clearInterval","Provider","value","initialState","rewardTokenPerBlock","farmsSlice","createSlice","reducers","setFarmsPublicData","state","action","liveFarmsData","payload","liveFarmData","f","pid","setFarmPublicData","setFarmUserData","arrayOfUserDataObjects","userDataEl","index","userData","actions","farmsV2Slice","setFarmsV2PublicData","setFarmV2PublicData","setFarmV2UserData","toastsSlice","toastIndex","findIndex","toast","splice","unshift","remove","clear","p","masterChefABI","PoolsSlice","setPoolsPublicData","livePoolsData","livePoolData","entry","setPoolsUserData","userPoolData","updatePoolsUserData","field","teams","images","lg","md","sm","alt","ipfs","background","textColor","users","points","profileSlice","isInitialized","isLoading","hasRegistered","profileFetchStart","profileFetchSucceeded","profile","profileFetchFailed","addPoints","teamsList","accum","team","teamsSlice","fetchStart","fetchFailed","teamFetchSucceeded","teamsFetchSucceeded","blockSlice","blockNumber","setBlock","_","campaigns","type","title","badge","campaignMap","Map","campaign","set","achievementSlice","addAchievement","addAchievements","concat","setAchievements","clearAchievements","useToast","BigNumber","dispatch","useDispatch","pushToast","toastError","kebabCase","toastTypes","DANGER","toastInfo","INFO","toastSuccess","SUCCESS","toastWarning","WARNING","removeToast","clearToast","useAuth","activate","deactivate","login","useCallback","connectorID","localStorage","removeItem","connectorLocalStorageKey","UnsupportedChainIdError","NoEthereumProviderError","UserRejectedRequestErrorInjected","UserRejectedRequestErrorWalletConnect","walletConnectProvider","logout","useEagerConnect","connectorId","getItem","BSC","SuspenseWithChunkError","props","hasError","isJsChunkLoadError","isCssChunkLoadError","isChunkLoadError","isRecoveringFromChunkError","history","nextState","replaceState","location","reload","fallback","Component","ToastListener","toasts","useSelector","onRemove","Wrapper","styled","div","theme","colors","LoaderAnimation","keyframes","spin","spinReverse","SVG","svg","PageLoader","version","xmlns","x","y","viewBox","enableBackground","fill","d","Home","lazy","NotFound","AppWrapper","BodyWrapper","EXPONENTIAL_AT","DECIMAL_PLACES","App","warn","videoPlayed","setVideoPlayed","style","overflow","exact","component","rpcUrl","getLibrary","EN","language","allLanguages","CACHE_KEY","LanguageContext","selectedLanguage","setSelectedLanguage","translatedLanguage","setTranslatedLanguage","projectId","REACT_APP_CROWDIN_PROJECTID","stringTranslationsApi","StringTranslations","token","REACT_APP_CROWDIN_APIKEY","LanguageContextProvider","storedLangCode","storedLang","getStoredLang","listLanguageTranslations","undefined","fetchTranslationsForSelectedLanguage","translationApiResponse","e","langObject","setItem","ThemeContext","isDark","toggleTheme","modTheme","dark","secondary","borderColor","textSubtle","text","tertiary","failure","input","success","navBorder","shadows","focus","nav","card","ThemeContextProvider","isDarkUserSetting","parse","setIsDark","prevState","configureStore","devTools","reducer","farmsV2","farmsV2Reducer","toastsReducer","poolsReducer","profileReducer","teamsReducer","achievements","achievementsReducer","block","blockReducer","Providers","store","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.bb7443bd.chunk.js","sourcesContent":["import { Ifo } from './types'\r\n\r\nconst ifos: Ifo[] = [\r\n  {\r\n    id: 'belt',\r\n    address: '0xc9FBedC033a1c479a6AD451ffE463025E92a1d38',\r\n    isActive: true,\r\n    name: 'Belt (BELT)',\r\n    subTitle: 'AMM protocol incorporating multi-strategy yield optimization',\r\n    description:\r\n      'Belt.fi is a protocol that allows users to retain the stability of their asset positions and get maximum yields with minimal risk, including automated vault compounding and yield optimization strategies. BELT is the governance and incentivization token of Belt Finance. BELT will be distributed to all types of pools.',\r\n    launchDate: 'Mar. 10',\r\n    launchTime: '5PM SGT',\r\n    saleAmount: '150,000 BELT',\r\n    raiseAmount: '$3,000,000',\r\n    cakeToBurn: '$1,500,000',\r\n    projectSiteUrl: 'https://beta.belt.fi/',\r\n    currency: 'CAKE-BNB LP',\r\n    currencyAddress: '0xA527a61703D82139F8a06Bc30097cC9CAA2df5A6',\r\n    tokenDecimals: 18,\r\n    tokenSymbol: 'BELT',\r\n    releaseBlockNumber: 5493919,\r\n    campaignId: '511080000',\r\n  },\r\n  {\r\n    id: 'watch',\r\n    address: '0x55344b55C71Ad8834C397E6e08dF5195cF84fe6d',\r\n    isActive: false,\r\n    name: 'Yieldwatch (WATCH)',\r\n    subTitle: 'A smart yield farming dashboard on BSC',\r\n    description:\r\n      'Yieldwatch is a smart yield farming dashboard on Binance Smart Chain that lets you monitor your liquidity pools, yield farming and token staking performance with fast and casual UI. The $WATCH token is a membership token, which is required to access advanced PRO features.',\r\n    launchDate: 'Mar. 4',\r\n    launchTime: '5PM SGT',\r\n    saleAmount: '8,000,000 WATCH',\r\n    raiseAmount: '$800,000',\r\n    cakeToBurn: '$400,000',\r\n    projectSiteUrl: 'https://yieldwatch.net/',\r\n    currency: 'CAKE-BNB LP',\r\n    currencyAddress: '0xA527a61703D82139F8a06Bc30097cC9CAA2df5A6',\r\n    tokenDecimals: 18,\r\n    tokenSymbol: 'WATCH',\r\n    releaseBlockNumber: 5294924,\r\n    campaignId: '511070000',\r\n  },\r\n  {\r\n    id: 'berry',\r\n    address: '0x5d028cE3435B2bB9AceBfaC599EEbA1ccD63d7dd',\r\n    isActive: false,\r\n    name: 'Berry (BRY)',\r\n    subTitle: 'A decentralized oracle network on BSC',\r\n    description:\r\n      'Berry Data is a transparent community-veriﬁed price oracle on BSC. Berry Data provides a trustless and decentralized alternative for off-chain data. As the governance token for Berry Data, BRY allows holders to pay for Berry Data feeds, vote on governance issues, validate data through staking, and build the Berry ecosystem.',\r\n    launchDate: 'Feb. 16',\r\n    launchTime: '5PM SGT',\r\n    saleAmount: '2,000,000 BRY',\r\n    raiseAmount: '$1,000,000',\r\n    cakeToBurn: '$500,000',\r\n    projectSiteUrl: 'https://berrydata.co/',\r\n    currency: 'CAKE-BNB LP',\r\n    currencyAddress: '0xA527a61703D82139F8a06Bc30097cC9CAA2df5A6',\r\n    tokenDecimals: 18,\r\n    tokenSymbol: 'BRY',\r\n    releaseBlockNumber: 4750968,\r\n    campaignId: '511060000',\r\n  },\r\n  {\r\n    id: 'soteria',\r\n    address: '0x9C21123D94b93361a29B2C2EFB3d5CD8B17e0A9e',\r\n    isActive: false,\r\n    name: 'Soteria (wSOTE)',\r\n    subTitle: 'A blockchain based mutual to share the risk of DeFi on Binance Smart Chain',\r\n    description:\r\n      'Soteria allows users to buy insurance cover to greatly diminish or reduce the financial risk of hacks. It replaces the idea of a traditional insurance company, because it is wholly owned by the members. The model encourages engagement as members receive economic incentives for participating in Risk Assessment, Claims Assessment and Governance.',\r\n    launchDate: 'Jan. 21',\r\n    launchTime: '4PM SGT',\r\n    saleAmount: '1,500,000 wSOTE',\r\n    raiseAmount: '$525,000',\r\n    cakeToBurn: '$262,500',\r\n    projectSiteUrl: 'https://soteria.finance/#/',\r\n    currency: 'CAKE-BNB LP',\r\n    currencyAddress: '0xA527a61703D82139F8a06Bc30097cC9CAA2df5A6',\r\n    tokenDecimals: 18,\r\n    tokenSymbol: 'wSOTE',\r\n    releaseBlockNumber: 4086064,\r\n    campaignId: '511050000',\r\n  },\r\n  {\r\n    id: 'helmet',\r\n    address: '0xa32509d760ee47Eb2Be96D338b5d69B5FBa4eFEB',\r\n    isActive: false,\r\n    name: 'Helmet.insure (Helmet)',\r\n    subTitle: 'Crypto-assets insurance trading platform',\r\n    description:\r\n      'Helmet is a peer-to-peer insurance protocol written with options trading logic, which allows anyone to create any insurance policy easily in the market. Helmet aims to enable DeFi users to be protected against the risk of price fluctuations by providing price-shield insurance for BSC assets. They provide suppliers with a range of insurance types to sell, giving a variety of hedging strategies to the market.',\r\n    launchDate: 'Jan. 13',\r\n    launchTime: '5PM SGT',\r\n    saleAmount: '10,000,000 Helmet',\r\n    raiseAmount: '$1,000,000',\r\n    cakeToBurn: '$500,000',\r\n    projectSiteUrl: 'https://www.helmet.insure/',\r\n    currency: 'CAKE-BNB LP',\r\n    currencyAddress: '0xA527a61703D82139F8a06Bc30097cC9CAA2df5A6',\r\n    tokenDecimals: 18,\r\n    tokenSymbol: 'Helmet',\r\n    releaseBlockNumber: 3771926,\r\n    campaignId: '511040000',\r\n  },\r\n  {\r\n    id: 'tenet',\r\n    address: '0xB922aA19A2603A07C6C9ED6c236618C9bac51f06',\r\n    isActive: false,\r\n    name: 'Tenet (TEN)',\r\n    subTitle: 'Cross-chain Automated Market Maker',\r\n    description:\r\n      'Tenet is a cross-chain Automated Market Maker (AMM) connector that provides a decentralized Liquidity Tap for various tokens. The Liquidity Tap is the powerhouse of the Liquidity Pool, employing a dynamic algorithm to give the Liquidity Provider fairer, more efficient, and richer incentives. Tenet aims to build a cross-chain and cross-platform toolkit protocol that allows the demand side to customize the parameters of the liquidity tap, allowing them to reach out to more liquidity participants effectively and with relative ease.',\r\n    launchDate: 'Jan. 5',\r\n    launchTime: '3PM SGT',\r\n    saleAmount: '1,000,000 TEN',\r\n    raiseAmount: '$1,000,000',\r\n    cakeToBurn: '$500,000',\r\n    projectSiteUrl: 'https://www.tenet.farm/',\r\n    currency: 'CAKE-BNB LP',\r\n    currencyAddress: '0xA527a61703D82139F8a06Bc30097cC9CAA2df5A6',\r\n    tokenDecimals: 18,\r\n    tokenSymbol: 'TEN',\r\n    releaseBlockNumber: 3483883,\r\n    campaignId: '511030000',\r\n  },\r\n  {\r\n    id: 'ditto',\r\n    address: '0x570c9eB19553526Fb35895a531928E19C7D20788',\r\n    isActive: false,\r\n    name: 'Ditto (DITTO)',\r\n    subTitle: 'Next-gen elastic supply token',\r\n    description:\r\n      'Ditto is the first elastic supply token on the Binance Smart Chain. Its goal is to maintain a stable price of $1, where its supply will adapt to changes in demand. All supply changes will apply equally to every wallet holding Ditto, and holders should always have the same % of the total supply',\r\n    launchDate: 'Dec. 23',\r\n    launchTime: '3PM SGT',\r\n    saleAmount: '700,000 DITTO',\r\n    raiseAmount: '$630,000',\r\n    cakeToBurn: '$315,000',\r\n    projectSiteUrl: 'https://ditto.money/',\r\n    currency: 'CAKE-BNB LP',\r\n    currencyAddress: '0xA527a61703D82139F8a06Bc30097cC9CAA2df5A6',\r\n    tokenDecimals: 9,\r\n    tokenSymbol: 'DITTO',\r\n    releaseBlockNumber: 3279767,\r\n    campaignId: '511020000',\r\n  },\r\n  {\r\n    id: 'blink',\r\n    address: '0x44a9Cc8463EC00937242b660BF65B10365d99baD',\r\n    isActive: false,\r\n    name: 'BLINk (BLK)',\r\n    subTitle: 'Online games on BSC',\r\n    description:\r\n      'BLINk enables BNB holders to enjoy gaming experiences that WINk users on Tron have been enjoying for over two years.',\r\n    launchDate: 'Nov. 20',\r\n    launchTime: '9PM SGT',\r\n    saleAmount: '100,000,000 BLINK',\r\n    raiseAmount: '$1,000,000',\r\n    cakeToBurn: '$500,000',\r\n    projectSiteUrl: 'https://blink.wink.org',\r\n    currency: 'CAKE-BNB LP',\r\n    currencyAddress: '0xA527a61703D82139F8a06Bc30097cC9CAA2df5A6',\r\n    tokenDecimals: 6,\r\n    tokenSymbol: 'blink',\r\n    releaseBlockNumber: 3279767,\r\n    campaignId: '511010000',\r\n  },\r\n]\r\n\r\nexport default ifos\r\n","import random from 'lodash/random'\r\n\r\n// Array of available nodes to connect to\r\nexport const nodes = [process.env.REACT_APP_NODE_1, process.env.REACT_APP_NODE_2, process.env.REACT_APP_NODE_3]\r\n\r\nconst getNodeUrl = () => {\r\n  const randomIndex = random(0, nodes.length - 1)\r\n  return nodes[randomIndex]\r\n}\r\n\r\nexport default getNodeUrl\r\n","import addresses from \"config/constants/contracts\";\r\nimport { farmsV2Config } from \"config/constants/farms\";\r\nimport { Address } from \"config/constants/types\";\r\n\r\nexport const getAddress = (address: Address): string => {\r\n  const mainNetChainId = 1;\r\n  const chainId = process.env.REACT_APP_CHAIN_ID;\r\n  return address[chainId] ? address[chainId] : address[mainNetChainId];\r\n};\r\n\r\nexport const getCakeAddress = () => {\r\n  return getAddress(addresses.cake);\r\n};\r\nexport const getMasterChefAddress = () => {\r\n  return getAddress(addresses.masterChef);\r\n};\r\n\r\nexport const getFarmV2Addresses = () => {\r\n  return farmsV2Config.map((config) => {\r\n    return getAddress(config.farmAddress);\r\n  });\r\n};\r\n\r\nexport const getMulticallAddress = () => {\r\n  return getAddress(addresses.mulltiCall);\r\n};\r\nexport const getWbnbAddress = () => {\r\n  return getAddress(addresses.wbnb);\r\n};\r\nexport const getLotteryAddress = () => {\r\n  return getAddress(addresses.lottery);\r\n};\r\nexport const getLotteryTicketAddress = () => {\r\n  return getAddress(addresses.lotteryNFT);\r\n};\r\nexport const getPancakeProfileAddress = () => {\r\n  return getAddress(addresses.pancakeProfile);\r\n};\r\nexport const getPancakeRabbitsAddress = () => {\r\n  return getAddress(addresses.pancakeRabbits);\r\n};\r\nexport const getBunnyFactoryAddress = () => {\r\n  return getAddress(addresses.bunnyFactory);\r\n};\r\nexport const getClaimRefundAddress = () => {\r\n  return getAddress(addresses.claimRefund);\r\n};\r\nexport const getPointCenterIfoAddress = () => {\r\n  return getAddress(addresses.pointCenterIfo);\r\n};\r\nexport const getBunnySpecialAddress = () => {\r\n  return getAddress(addresses.bunnySpecial);\r\n};\r\n","export default __webpack_public_path__ + \"static/media/arrowRight.956d575c.svg\";","export default __webpack_public_path__ + \"static/media/coinbaseWalletIcon.a3a7d7fd.svg\";","export default __webpack_public_path__ + \"static/media/walletConnectIcon.304e3277.svg\";","import { AbstractConnector } from '@web3-react/abstract-connector'\r\nimport INJECTED_ICON_URL from 'assets/images/arrowRight.svg'\r\nimport COINBASE_ICON_URL from 'assets/images/coinbaseWalletIcon.svg'\r\nimport METAMASK_ICON_URL from 'assets/images/metamask.png'\r\nimport WALLETCONNECT_ICON_URL from 'assets/images/walletConnectIcon.svg'\r\nimport { injected, walletconnect, walletlink } from 'utils/connectors'\r\nimport { nodes } from './getRpcUrl'\r\n\r\ninterface WalletInfo {\r\n  connector?: AbstractConnector\r\n  name: string\r\n  iconURL: string\r\n  description: string\r\n  href: string | null\r\n  color: string\r\n  primary?: true\r\n  mobile?: true\r\n  mobileOnly?: true\r\n}\r\n\r\nexport const SUPPORTED_WALLETS: { [key: string]: WalletInfo } = {\r\n  INJECTED: {\r\n    connector: injected,\r\n    name: 'Injected',\r\n    iconURL: INJECTED_ICON_URL,\r\n    description: 'Injected web3 provider.',\r\n    href: null,\r\n    color: '#010101',\r\n    primary: true,\r\n  },\r\n  METAMASK: {\r\n    connector: injected,\r\n    name: 'MetaMask',\r\n    iconURL: METAMASK_ICON_URL,\r\n    description: 'Easy-to-use browser extension.',\r\n    href: null,\r\n    color: '#E8831D',\r\n    mobile: true,\r\n  },\r\n  WALLET_CONNECT: {\r\n    connector: walletconnect,\r\n    name: 'WalletConnect',\r\n    iconURL: WALLETCONNECT_ICON_URL,\r\n    description: 'Connect to Trust Wallet, Rainbow Wallet and more...',\r\n    href: null,\r\n    color: '#4196FC',\r\n    mobile: true,\r\n  },\r\n  WALLET_CONNECT_MOBILE: {\r\n    connector: walletconnect,\r\n    name: 'WalletConnect (Mobile)',\r\n    iconURL: WALLETCONNECT_ICON_URL,\r\n    description: 'Connect to Trust Wallet, Rainbow Wallet and more...',\r\n    href: null,\r\n    color: '#4196FC',\r\n    mobile: true,\r\n  },\r\n  WALLET_LINK: {\r\n    connector: walletlink,\r\n    name: 'Coinbase Wallet',\r\n    iconURL: COINBASE_ICON_URL,\r\n    description: 'Use Coinbase Wallet app on mobile device',\r\n    href: null,\r\n    color: '#315CF5',\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * Prompt the user to add a custom token to metamask\r\n * @param tokenAddress\r\n * @param tokenSymbol\r\n * @param tokenDecimals\r\n * @param tokenImage\r\n * @returns {boolean} true if the token has been added, false otherwise\r\n */\r\n export const registerToken = async (\r\n  tokenAddress: string,\r\n  tokenSymbol: string,\r\n  tokenDecimals: number,\r\n  tokenImage: string,\r\n) => {\r\n  const tokenAdded = await (window as WindowChain).ethereum.request({\r\n    method: 'wallet_watchAsset',\r\n    params: {\r\n      type: 'ERC20',\r\n      options: {\r\n        address: tokenAddress,\r\n        symbol: tokenSymbol,\r\n        decimals: tokenDecimals,\r\n        image: tokenImage,\r\n      },\r\n    },\r\n  })\r\n\r\n  return tokenAdded\r\n}\r\n\r\n/**\r\n * Prompt the user to add BSC as a network on Metamask, or switch to BSC if the wallet is on a different network\r\n * @returns {boolean} true if the setup succeeded, false otherwise\r\n */\r\nexport const setupNetwork = async () => {\r\n  const provider = (window as WindowChain).ethereum\r\n  if (provider) {\r\n    const chainId = process.env.REACT_APP_CHAIN_ID || 1;\r\n    try {\r\n      await provider.request({\r\n        method: 'wallet_switchEthereumChain',\r\n        params: [\r\n          {\r\n            chainId: `0x${chainId.toString(16)}`,\r\n          },\r\n        ],\r\n      })\r\n      return true\r\n    } catch (error) {\r\n      console.error(error)\r\n      return false\r\n    }\r\n  } else {\r\n    console.error(\"Can't setup the ETH network on metamask because window.ethereum is undefined\")\r\n    return false\r\n  }\r\n}\r\n\r\nexport default SUPPORTED_WALLETS","import farmsConfig from './farms'\r\n\r\nconst communityFarms = farmsConfig.filter((farm) => farm.isCommunity).map((farm) => farm.tokenSymbol)\r\n\r\nexport { farmsConfig, communityFarms }\r\nexport { default as poolsConfig } from './pools'\r\nexport { default as ifosConfig } from './ifo'\r\n","import Web3 from 'web3'\r\nimport { AbiItem } from 'web3-utils'\r\nimport web3NoAccount from 'utils/web3'\r\nimport { poolsConfig } from 'config/constants'\r\nimport { PoolCategory } from 'config/constants/types'\r\n\r\n// Addresses\r\nimport {\r\n  getAddress,\r\n  getPancakeProfileAddress,\r\n  getPancakeRabbitsAddress,\r\n  getBunnyFactoryAddress,\r\n  getBunnySpecialAddress,\r\n  getCakeAddress,\r\n  getLotteryAddress,\r\n  getLotteryTicketAddress,\r\n  getMasterChefAddress,\r\n  getPointCenterIfoAddress,\r\n  getClaimRefundAddress,\r\n} from 'utils/addressHelpers'\r\n\r\n// ABI\r\nimport profileABI from 'config/abi/pancakeProfile.json'\r\nimport pancakeRabbitsAbi from 'config/abi/pancakeRabbits.json'\r\nimport bunnyFactoryAbi from 'config/abi/bunnyFactory.json'\r\nimport bunnySpecialAbi from 'config/abi/bunnySpecial.json'\r\nimport bep20Abi from 'config/abi/erc20.json'\r\nimport cakeAbi from 'config/abi/cake.json'\r\nimport ifoAbi from 'config/abi/ifo.json'\r\nimport pointCenterIfo from 'config/abi/pointCenterIfo.json'\r\nimport lotteryAbi from 'config/abi/lottery.json'\r\nimport lotteryTicketAbi from 'config/abi/lotteryNft.json'\r\nimport masterChef from 'config/abi/masterchef.json'\r\nimport farmV2 from 'config/abi/farmV2.json'\r\nimport sousChef from 'config/abi/sousChef.json'\r\nimport sousChefBnb from 'config/abi/sousChefBnb.json'\r\nimport claimRefundAbi from 'config/abi/claimRefund.json'\r\n\r\nexport const getContract = (abi: any, address: string, web3?: Web3) => {\r\n  const _web3 = web3 ?? web3NoAccount\r\n  return new _web3.eth.Contract((abi as unknown) as AbiItem, address)\r\n}\r\n\r\nexport const getBep20Contract = (address: string, web3?: Web3) => {\r\n  return getContract(bep20Abi, address, web3)\r\n}\r\nexport const getIfoContract = (address: string, web3?: Web3) => {\r\n  return getContract(ifoAbi, address, web3)\r\n}\r\nexport const getSouschefContract = (id: number, web3?: Web3) => {\r\n  const config = poolsConfig.find((pool) => pool.sousId === id)\r\n  const abi = config.poolCategory === PoolCategory.BINANCE ? sousChefBnb : sousChef\r\n  return getContract(abi, getAddress(config.contractAddress), web3)\r\n}\r\nexport const getPointCenterIfoContract = (web3?: Web3) => {\r\n  return getContract(pointCenterIfo, getPointCenterIfoAddress(), web3)\r\n}\r\nexport const getCakeContract = (web3?: Web3) => {\r\n  return getContract(cakeAbi, getCakeAddress(), web3)\r\n}\r\nexport const getProfileContract = (web3?: Web3) => {\r\n  return getContract(profileABI, getPancakeProfileAddress(), web3)\r\n}\r\nexport const getPancakeRabbitContract = (web3?: Web3) => {\r\n  return getContract(pancakeRabbitsAbi, getPancakeRabbitsAddress(), web3)\r\n}\r\nexport const getBunnyFactoryContract = (web3?: Web3) => {\r\n  return getContract(bunnyFactoryAbi, getBunnyFactoryAddress(), web3)\r\n}\r\nexport const getBunnySpecialContract = (web3?: Web3) => {\r\n  return getContract(bunnySpecialAbi, getBunnySpecialAddress(), web3)\r\n}\r\nexport const getLotteryContract = (web3?: Web3) => {\r\n  return getContract(lotteryAbi, getLotteryAddress(), web3)\r\n}\r\nexport const getLotteryTicketContract = (web3?: Web3) => {\r\n  return getContract(lotteryTicketAbi, getLotteryTicketAddress(), web3)\r\n}\r\nexport const getMasterchefContract = (web3?: Web3) => {\r\n  return getContract(masterChef, getMasterChefAddress(), web3)\r\n}\r\nexport const getFarmV2Contract = (address: string, web3?: Web3) => {\r\n  return getContract(farmV2, address, web3)\r\n}\r\nexport const getClaimRefundContract = (web3?: Web3) => {\r\n  return getContract(claimRefundAbi, getClaimRefundAddress(), web3)\r\n}\r\n","export default __webpack_public_path__ + \"static/media/metamask.02e3ec27.png\";","import contracts from \"./contracts\";\r\nimport { FarmConfig, FarmV2Config, QuoteToken } from \"./types\";\r\n\r\nconst YUNA_GOERLI = \"0xf889850CB53b9f63Bd3382a03e1a63D97F4Ff999\";\r\nconst LP_GOERLI = \"0x58460ab9170e48b0c4ccc83dffdfd033eb3f3ad5\";\r\n\r\n\r\nconst YUNA_MAIN = \"0x2F6f397332B0F8b4536430bCC97980aA838f62f9\";\r\nconst LP_MAIN = \"0x99b975590364dfdEa0ED8550d0d862c78E07C43d\";\r\n\r\nconst farms: FarmConfig[] = [\r\n];\r\n\r\nexport const farmsV2Config: FarmV2Config[] = [\r\n  {\r\n    farmAddress: {\r\n      5: \"0x3485b22e0B9e4c97b453CA97744b6dd9e353aE70\",\r\n      1: \"0xD6368280d32cB4d3f740B114aB254263d01CC653\",\r\n    },\r\n    lpSymbol: \"YUNA-ETH LP 28 DAY\",\r\n    lpAddresses: {\r\n      // Token being staked\r\n      5: YUNA_GOERLI,\r\n      1: LP_MAIN,\r\n    },\r\n    tokenSymbol: \"YUNA-ETH\",\r\n    tokenAddresses: {\r\n      // Reward Token\r\n      5: YUNA_GOERLI,\r\n      1: YUNA_MAIN,\r\n    },\r\n    quoteTokenSymbol: QuoteToken.ETH,\r\n    quoteTokenAdresses: contracts.wbnb,\r\n    earlyWithdrawalSeconds: 2419200,\r\n  },\r\n  {\r\n    farmAddress: {\r\n      4: \"0x16AEabFC6A1C3Cc44829A1Fbc44D9b68f85d082a\",\r\n      1: \"0x7b4F8e93186C8AA795DA36E8C4D4bFFda38E63A4\",\r\n    },\r\n    lpSymbol: \"YUNA 28 DAY\",\r\n    lpAddresses: {\r\n      // Token being staked\r\n      4: LP_GOERLI,\r\n      1: YUNA_MAIN,\r\n    },\r\n    tokenSymbol: \"YUNA\",\r\n    tokenAddresses: {\r\n      // Reward Token\r\n      4: YUNA_GOERLI,\r\n      1: YUNA_MAIN,\r\n    },\r\n    quoteTokenSymbol: QuoteToken.CAKE,\r\n    quoteTokenAdresses: contracts.wbnb,\r\n    earlyWithdrawalSeconds: 2419200,\r\n  },\r\n];\r\n\r\nexport default farms;\r\n","import React, { createContext } from 'react'\r\n\r\nexport interface TranslationState {\r\n  translations: Array<any>\r\n  setTranslations: React.Dispatch<React.SetStateAction<Array<any>>>\r\n}\r\n\r\nconst defaultTranslationState: TranslationState = {\r\n  translations: [],\r\n  setTranslations: (): void => undefined,\r\n}\r\n\r\nexport const TranslationsContext = createContext(defaultTranslationState as TranslationState)\r\n","import { useEffect, useState, useRef } from 'react'\r\nimport Web3 from 'web3'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { getWeb3NoAccount } from 'utils/web3'\r\n\r\n/**\r\n * Provides a web3 instance using the provider provided by useWallet\r\n * with a fallback of an httpProver\r\n * Recreate web3 instance only if the provider change\r\n */\r\nconst useWeb3 = () => {\r\n  const { library } = useWeb3React()\r\n  const refEth = useRef(library)\r\n  const [web3, setweb3] = useState(library ? new Web3(library) : getWeb3NoAccount())\r\n\r\n  useEffect(() => {\r\n    if (library !== refEth.current) {\r\n      setweb3(library ? new Web3(library) : getWeb3NoAccount())\r\n      refEth.current = library\r\n    }\r\n  }, [library])\r\n\r\n  return web3\r\n}\r\n\r\nexport default useWeb3\r\n","import { useMemo } from 'react'\r\nimport useWeb3 from 'hooks/useWeb3'\r\nimport {\r\n  getBep20Contract,\r\n  getCakeContract,\r\n  getBunnyFactoryContract,\r\n  getBunnySpecialContract,\r\n  getPancakeRabbitContract,\r\n  getProfileContract,\r\n  getIfoContract,\r\n  getLotteryContract,\r\n  getLotteryTicketContract,\r\n  getMasterchefContract,\r\n  getPointCenterIfoContract,\r\n  getSouschefContract,\r\n  getClaimRefundContract,\r\n  getContract,\r\n} from 'utils/contractHelpers'\r\n\r\n/**\r\n * Helper hooks to get specific contracts (by ABI)\r\n */\r\nexport const useContract = (abi: any, address: string) => {\r\n  const web3 = useWeb3()\r\n  return useMemo(() => getContract(abi, address, web3), [abi, address, web3])\r\n}\r\n\r\nexport const useIfoContract = (address: string) => {\r\n  const web3 = useWeb3()\r\n  return useMemo(() => getIfoContract(address, web3), [address, web3])\r\n}\r\n\r\nexport const useERC20 = (address: string) => {\r\n  const web3 = useWeb3()\r\n  return useMemo(() => getBep20Contract(address, web3), [address, web3])\r\n}\r\n\r\nexport const useCake = () => {\r\n  const web3 = useWeb3()\r\n  return useMemo(() => getCakeContract(web3), [web3])\r\n}\r\n\r\nexport const useBunnyFactory = () => {\r\n  const web3 = useWeb3()\r\n  return useMemo(() => getBunnyFactoryContract(web3), [web3])\r\n}\r\n\r\nexport const usePancakeRabbits = () => {\r\n  const web3 = useWeb3()\r\n  return useMemo(() => getPancakeRabbitContract(web3), [web3])\r\n}\r\n\r\nexport const useProfile = () => {\r\n  const web3 = useWeb3()\r\n  return useMemo(() => getProfileContract(web3), [web3])\r\n}\r\n\r\nexport const useLottery = () => {\r\n  const web3 = useWeb3()\r\n  return useMemo(() => getLotteryContract(web3), [web3])\r\n}\r\n\r\nexport const useLotteryTicket = () => {\r\n  const web3 = useWeb3()\r\n  return useMemo(() => getLotteryTicketContract(web3), [web3])\r\n}\r\n\r\nexport const useMasterchef = () => {\r\n  const web3 = useWeb3()\r\n  return useMemo(() => getMasterchefContract(web3), [web3])\r\n}\r\n\r\nexport const useSousChef = (id) => {\r\n  const web3 = useWeb3()\r\n  return useMemo(() => getSouschefContract(id, web3), [id, web3])\r\n}\r\n\r\nexport const usePointCenterIfoContract = () => {\r\n  const web3 = useWeb3()\r\n  return useMemo(() => getPointCenterIfoContract(web3), [web3])\r\n}\r\n\r\nexport const useBunnySpecialContract = () => {\r\n  const web3 = useWeb3()\r\n  return useMemo(() => getBunnySpecialContract(web3), [web3])\r\n}\r\n\r\nexport const useClaimRefundContract = () => {\r\n  const web3 = useWeb3()\r\n  return useMemo(() => getClaimRefundContract(web3), [web3])\r\n}\r\n","export default {\r\n  cake: {\r\n    5: '0xf889850CB53b9f63Bd3382a03e1a63D97F4Ff999',\r\n    1: '0x2F6f397332B0F8b4536430bCC97980aA838f62f9', // made this XPLAY\r\n  },\r\n  syrup: {\r\n    4: '',\r\n    1: '0x85346d658909d93f31a232f60fc45454919d79dc', // changed to syrup contract in below masterchef contract\r\n  },\r\n  masterChef: {\r\n    4: '',\r\n    1: '0x33038334F54E97A8beb276BD528f0e6E55c1861D', // changed to masterchef for XPLAY\r\n  },\r\n  sousChef: {\r\n    4: '',\r\n    1: '0x6ab8463a4185b80905e05a9ff80a2d6b714b9e95',   \r\n  },\r\n  wbnb: {\r\n    5: '0xb4fbf271143f4fbf7b91a5ded31805e42b2208d6',\r\n    1: '0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2',\r\n  },\r\n  lottery: {\r\n    4: '',\r\n    1: '0x3C3f2049cc17C136a604bE23cF7E42745edf3b91',\r\n  },\r\n  lotteryNFT: {\r\n    4: '',\r\n    1: '0x5e74094Cd416f55179DBd0E45b1a8ED030e396A1',\r\n  },\r\n  mulltiCall: {\r\n    1: '0x5BA1e12693Dc8F9c48aAD8770482f4739bEeD696',\r\n    5: '0x5ba1e12693dc8f9c48aad8770482f4739beed696',\r\n  },\r\n  busd: {\r\n    1: '0xe9e7cea3dedca5984780bafc599bd69add087d56',\r\n    4: '',\r\n  },\r\n  ust: {\r\n    1: '0x23396cF899Ca06c4472205fC903bDB4de249D6fC',\r\n    4: '',\r\n  },\r\n  pancakeProfile: {\r\n    1: '0xDf4dBf6536201370F95e06A0F8a7a70fE40E388a',\r\n    4: '',\r\n  },\r\n  pancakeRabbits: {\r\n    1: '0xDf7952B35f24aCF7fC0487D01c8d5690a60DBa07',\r\n    4: '',\r\n  },\r\n  bunnyFactory: {\r\n    1: '0xfa249Caa1D16f75fa159F7DFBAc0cC5EaB48CeFf',\r\n    4: '',\r\n  },\r\n  eth: {\r\n    1: '0x2170ed0880ac9a755fd29b2688956bd959f933f8',\r\n    4: '',\r\n  },\r\n  claimRefund: {\r\n    1: '0xE7e53A7e9E3Cf6b840f167eF69519175c497e149',\r\n    4: '',\r\n  },\r\n  pointCenterIfo: {\r\n    1: '0x3C6919b132462C1FEc572c6300E83191f4F0012a',\r\n    4: '',\r\n  },\r\n  bunnySpecial: {\r\n    1: '0xFee8A195570a18461146F401d6033f5ab3380849',\r\n    4: '',\r\n  },\r\n}\r\n","import { TranslatableText } from \"state/types\";\r\n\r\nexport type IfoStatus = \"idle\" | \"coming_soon\" | \"live\" | \"finished\";\r\n\r\nexport interface Ifo {\r\n  id: string;\r\n  isActive: boolean;\r\n  address: string;\r\n  name: string;\r\n  subTitle?: string;\r\n  description?: string;\r\n  launchDate: string;\r\n  launchTime: string;\r\n  saleAmount: string;\r\n  raiseAmount: string;\r\n  cakeToBurn: string;\r\n  projectSiteUrl: string;\r\n  currency: string;\r\n  currencyAddress: string;\r\n  tokenDecimals: number;\r\n  tokenSymbol: string;\r\n  releaseBlockNumber: number;\r\n  campaignId?: string;\r\n}\r\n\r\nexport enum QuoteToken {\r\n  \"BNB\" = \"ETH\",\r\n  \"CAKE\" = \"YUNA\",\r\n  \"X2P\" = \"X2P\",\r\n  \"SYRUP\" = \"SYRUP\",\r\n  \"BUSD\" = \"BUSD\",\r\n  \"TWT\" = \"TWT\",\r\n  \"UST\" = \"UST\",\r\n  \"ETH\" = \"ETH\",\r\n  \"COMP\" = \"COMP\",\r\n  \"SUSHI\" = \"SUSHI\",\r\n  \"TPT\" = \"TPT\",\r\n}\r\n\r\nexport enum PoolCategory {\r\n  \"COMMUNITY\" = \"Community\",\r\n  \"CORE\" = \"Core\",\r\n  \"BINANCE\" = \"Binance\", // Pools using native BNB behave differently than pools using a token\r\n}\r\n\r\nexport interface Address {\r\n  5?: string;\r\n  4?: string;\r\n  1: string;\r\n}\r\n\r\nexport interface FarmConfig {\r\n  pid: number;\r\n  lpSymbol: string;\r\n  lpAddresses: Address;\r\n  tokenSymbol: string;\r\n  tokenAddresses: Address;\r\n  quoteTokenSymbol: QuoteToken;\r\n  quoteTokenAdresses: Address;\r\n  multiplier?: string;\r\n  isCommunity?: boolean;\r\n  dual?: {\r\n    rewardPerBlock: number;\r\n    earnLabel: string;\r\n    endBlock: number;\r\n  };\r\n}\r\n\r\nexport interface FarmV2Config {\r\n  farmAddress: Address;\r\n  lpSymbol: string;\r\n  lpAddresses: Address;\r\n  tokenSymbol: string;\r\n  tokenAddresses: Address;\r\n  quoteTokenSymbol: QuoteToken;\r\n  quoteTokenAdresses: Address;\r\n  multiplier?: string;\r\n  isCommunity?: boolean;\r\n  earlyWithdrawalSeconds?: number;\r\n  dual?: {\r\n    rewardPerBlock: number;\r\n    earnLabel: string;\r\n    endBlock: number;\r\n  };\r\n}\r\n\r\nexport interface PoolConfig {\r\n  sousId: number;\r\n  tokenName: string;\r\n  tokenAddress: string;\r\n  stakingTokenName: QuoteToken;\r\n  stakingLimit?: number;\r\n  stakingTokenAddress?: string;\r\n  stakingTokenDecimals?: number;\r\n  contractAddress: Address;\r\n  poolCategory: PoolCategory;\r\n  projectLink: string;\r\n  tokenPerBlock: string;\r\n  sortOrder?: number;\r\n  harvest?: boolean;\r\n  isFinished?: boolean;\r\n  tokenDecimals: number;\r\n}\r\n\r\nexport type Images = {\r\n  lg: string;\r\n  md: string;\r\n  sm: string;\r\n  ipfs?: string;\r\n};\r\n\r\nexport type NftImages = {\r\n  blur?: string;\r\n} & Images;\r\n\r\nexport type NftVideo = {\r\n  webm: string;\r\n  mp4: string;\r\n};\r\n\r\nexport type Nft = {\r\n  name: string;\r\n  description: string;\r\n  images: NftImages;\r\n  sortOrder: number;\r\n  bunnyId: number;\r\n  video?: NftVideo;\r\n};\r\n\r\nexport type TeamImages = {\r\n  alt: string;\r\n} & Images;\r\n\r\nexport type Team = {\r\n  id: number;\r\n  name: string;\r\n  description: string;\r\n  isJoinable?: boolean;\r\n  users: number;\r\n  points: number;\r\n  images: TeamImages;\r\n  background: string;\r\n  textColor: string;\r\n};\r\n\r\nexport type CampaignType = \"ifo\";\r\n\r\nexport type Campaign = {\r\n  id: string;\r\n  type: CampaignType;\r\n  title?: TranslatableText;\r\n  description?: TranslatableText;\r\n  badge?: string;\r\n};\r\n","import { PoolConfig, QuoteToken, PoolCategory } from './types'\r\n\r\nconst pools: PoolConfig[] = [\r\n  {\r\n    sousId: 0,\r\n    tokenName: 'BX2P',\r\n    tokenAddress: '0x8A4b6747F922515ff0c4C910747247cF7e5e9801',   // token address\r\n    stakingTokenName: QuoteToken.CAKE,\r\n    stakingTokenAddress: '0x8A4b6747F922515ff0c4C910747247cF7e5e9801',  // token address\r\n    contractAddress: {\r\n      1: '',\r\n      4: '0x083d5710213ed4772b6E56AcE2611BC65A8Cf5f0',  /// masterchef address\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    projectLink: '/',\r\n    harvest: true,\r\n    tokenPerBlock: '10',\r\n    sortOrder: 1,\r\n    isFinished: false,\r\n    tokenDecimals: 18,\r\n  },\r\n \r\n]\r\n\r\nexport default pools\r\n","import Web3 from 'web3'\r\nimport { HttpProviderOptions } from 'web3-core-helpers'\r\nimport getRpcUrl from 'utils/getRpcUrl'\r\n\r\nconst RPC_URL = getRpcUrl()\r\nconst httpProvider = new Web3.providers.HttpProvider(RPC_URL, { timeout: 10000 } as HttpProviderOptions)\r\nconst web3NoAccount = new Web3(httpProvider)\r\nconst getWeb3NoAccount = () => {\r\n  return web3NoAccount\r\n}\r\n\r\nexport { getWeb3NoAccount }\r\nexport default web3NoAccount\r\n","\nexport default class RequestError extends Error {\n  constructor(message: string, public code: number, public data?: unknown) {\n    super(message)\n  }\n}\n\n","import RequestError from \"./RequestError\";\n\nexport type AsyncSendable = {\n  isMetaMask?: boolean;\n  host?: string;\n  path?: string;\n  sendAsync?: (\n    request: any,\n    callback: (error: any, response: any) => void,\n  ) => void;\n  send?: (request: any, callback: (error: any, response: any) => void) => void;\n};\n\nexport interface BatchItem {\n  request: { jsonrpc: \"2.0\"; id: number; method: string; params: unknown };\n  resolve: (result: any) => void;\n  reject: (error: Error) => void;\n}\n\nexport default class MiniRpcProvider implements AsyncSendable {\n  public readonly isMetaMask: false = false;\n\n  public readonly chainId: number;\n\n  public readonly url: string;\n\n  public readonly host: string;\n\n  public readonly path: string;\n\n  public readonly batchWaitTimeMs: number;\n\n  private nextId = 1;\n\n  private batchTimeoutId: ReturnType<typeof setTimeout> | null = null;\n\n  private batch: BatchItem[] = [];\n\n  constructor(chainId: number, url: string, batchWaitTimeMs?: number) {\n    this.chainId = chainId;\n    this.url = url;\n    const parsed = new URL(url);\n    this.host = parsed.host;\n    this.path = parsed.pathname;\n    // how long to wait to batch calls\n    this.batchWaitTimeMs = batchWaitTimeMs ?? 50;\n  }\n\n  public readonly clearBatch = async () => {\n    const { batch } = this;\n    this.batch = [];\n    this.batchTimeoutId = null;\n    let response: Response;\n    try {\n      response = await fetch(this.url, {\n        method: \"POST\",\n        headers: {\n          \"content-type\": \"application/json\",\n          accept: \"application/json\",\n        },\n        body: JSON.stringify(batch.map((item) => item.request)),\n      });\n    } catch (error) {\n      batch.forEach(({ reject }) =>\n        reject(new Error(\"Failed to send batch call\")),\n      );\n      return;\n    }\n\n    if (!response.ok) {\n      batch.forEach(({ reject }) =>\n        reject(\n          new RequestError(\n            `${response.status}: ${response.statusText}`,\n            -32000,\n          ),\n        ),\n      );\n      return;\n    }\n\n    let json;\n    try {\n      json = await response.json();\n    } catch (error) {\n      batch.forEach(({ reject }) =>\n        reject(new Error(\"Failed to parse JSON response\")),\n      );\n      return;\n    }\n    const byKey = batch.reduce<{ [id: number]: BatchItem }>((memo, current) => {\n      const newMemo = memo;\n      newMemo[current.request.id] = current;\n      return newMemo;\n    }, {});\n    // eslint-disable-next-line no-restricted-syntax\n    for (const result of json) {\n      const {\n        resolve,\n        reject,\n        request: { method },\n      } = byKey[result.id];\n      if (resolve) {\n        if (\"error\" in result) {\n          reject(\n            new RequestError(\n              result?.error?.message,\n              result?.error?.code,\n              result?.error?.data,\n            ),\n          );\n        } else if (\"result\" in result) {\n          resolve(result.result);\n        } else {\n          reject(\n            new RequestError(\n              `Received unexpected JSON-RPC response to ${method} request.`,\n              -32000,\n              result,\n            ),\n          );\n        }\n      }\n    }\n  };\n\n  public readonly sendAsync = (\n    request: {\n      jsonrpc: \"2.0\";\n      id: number | string | null;\n      method: string;\n      params?: any;\n    },\n    callback: (error: any, response: any) => void,\n  ): void => {\n    this.request(request.method, request.params)\n      .then((result) =>\n        callback(null, { jsonrpc: \"2.0\", id: request.id, result }),\n      )\n      .catch((error) => callback(error, null));\n  };\n\n  public readonly request = async (\n    method: string | { method: string; params: unknown[] },\n    params?: any,\n  ): Promise<unknown> => {\n    if (typeof method !== \"string\") {\n      return this.request(method.method, method.params);\n    }\n    if (method === \"eth_chainId\") {\n      return `0x${this.chainId.toString(16)}`;\n    }\n    const promise = new Promise((resolve, reject) => {\n      this.batch.push({\n        request: {\n          jsonrpc: \"2.0\",\n          id: this.nextId++,\n          method,\n          params,\n        },\n        resolve,\n        reject,\n      });\n    });\n    this.batchTimeoutId =\n      this.batchTimeoutId ?? setTimeout(this.clearBatch, this.batchWaitTimeMs);\n    return promise;\n  };\n}\n","import { ConnectorUpdate } from '@web3-react/types'\nimport { AbstractConnector } from '@web3-react/abstract-connector'\nimport invariant from 'tiny-invariant'\nimport MiniRpcProvider from './MiniRpcProvider'\n\ninterface NetworkConnectorArguments {\n  urls: { [chainId: number]: string }\n  defaultChainId?: number\n}\n\n// taken from ethers.js, compatible interface with web3 provider\n\n\nexport class NetworkConnector extends AbstractConnector {\n  private readonly providers: { [chainId: number]: MiniRpcProvider }\n\n  private currentChainId: number\n\n  constructor({ urls, defaultChainId }: NetworkConnectorArguments) {\n    invariant(defaultChainId || Object.keys(urls).length === 1, 'defaultChainId is a required argument with >1 url')\n    super({ supportedChainIds: Object.keys(urls).map((k): number => Number(k)) })\n\n    this.currentChainId = defaultChainId || Number(Object.keys(urls)[0])\n    this.providers = Object.keys(urls).reduce<{ [chainId: number]: MiniRpcProvider }>((accumulator, chainId) => {\n      accumulator[Number(chainId)] = new MiniRpcProvider(Number(chainId), urls[Number(chainId)])\n      return accumulator\n    }, {})\n  }\n\n  public get provider(): MiniRpcProvider {\n    return this.providers[this.currentChainId]\n  }\n\n  public async activate(): Promise<ConnectorUpdate> {\n    return { provider: this.providers[this.currentChainId], chainId: this.currentChainId, account: null }\n  }\n\n  public async getProvider(): Promise<MiniRpcProvider> {\n    return this.providers[this.currentChainId]\n  }\n\n  public async getChainId(): Promise<number> {\n    return this.currentChainId\n  }\n\n  public async getAccount(): Promise<null> {\n    const _ = this.providers\n    return null\n  }\n\n  public deactivate() {\n    const _ = this.providers\n    return null\n  }\n}\n\nexport default NetworkConnector\n","import { ConnectorNames } from '@pancakeswap-libs/uikit'\nimport { Web3Provider } from '@ethersproject/providers'\nimport { InjectedConnector } from '@web3-react/injected-connector'\nimport { WalletConnectConnector } from '@web3-react/walletconnect-connector'\nimport { WalletLinkConnector } from '@web3-react/walletlink-connector'\nimport Web3 from 'web3'\n\nimport { NetworkConnector } from './NetworkConnector'\n\nconst NETWORK_URL = process.env.REACT_APP_NETWORK_URL\n\nexport const NETWORK_CHAIN_ID: number = parseInt(process.env.REACT_APP_CHAIN_ID ?? '1')\n\nif (typeof NETWORK_URL === 'undefined') {\n  throw new Error(`REACT_APP_NETWORK_URL must be a defined environment variable`)\n}\n\nexport const network = new NetworkConnector({\n  urls: { [NETWORK_CHAIN_ID]: NETWORK_URL },\n})\n\nlet networkLibrary: Web3Provider | undefined\nexport function getNetworkLibrary(): Web3Provider {\n  // eslint-disable-next-line no-return-assign\n  return (networkLibrary = networkLibrary ?? new Web3Provider(network.provider as any))\n}\n\nexport const injected = new InjectedConnector({\n  supportedChainIds: [31337, 5, 1],\n})\n\n// mainnet only\nexport const walletconnect = new WalletConnectConnector({\n  rpc: { [NETWORK_CHAIN_ID]: NETWORK_URL },\n  bridge: 'https://bridge.walletconnect.org',\n  qrcode: true,\n  // pollingInterval: 15000,\n})\n\n// mainnet only\nexport const walletlink = new WalletLinkConnector({\n  url: NETWORK_URL,\n  appName: 'Uniswap',\n  appLogoUrl:\n    'https://mpng.pngfly.com/20181202/bex/kisspng-emoji-domain-unicorn-pin-badges-sticker-unicorn-tumblr-emoji-unicorn-iphoneemoji-5c046729264a77.5671679315437924251569.jpg',\n})\n\nexport const connectorsByName = {\n  [ConnectorNames.Injected]: injected,\n  [ConnectorNames.WalletConnect]: walletconnect,\n}\n\n\n\n\nconst httpProvider = new Web3.providers.HttpProvider(NETWORK_URL)\n// @ts-ignore\nexport const web3NoAccount = new Web3(window.web3?.currentProvider || httpProvider)\n// @ts-ignore\nexport const web3WriteAccount = new Web3(window.ethereum || window.web3?.currentProvider)\n","import React, { useState, useEffect } from 'react'\r\n\r\nconst FAST_INTERVAL = 100000\r\nconst SLOW_INTERVAL = 600000\r\n\r\nconst RefreshContext = React.createContext({ slow: 0, fast: 0 })\r\n\r\n// This context maintain 2 counters that can be used as a dependencies on other hooks to force a periodic refresh\r\nconst RefreshContextProvider = ({ children }) => {\r\n  const [slow, setSlow] = useState(0)\r\n  const [fast, setFast] = useState(0)\r\n\r\n  useEffect(() => {\r\n    const interval = setInterval(async () => {\r\n      setFast((prev) => prev + 1)\r\n    }, FAST_INTERVAL)\r\n    return () => clearInterval(interval)\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    const interval = setInterval(async () => {\r\n      setSlow((prev) => prev + 1)\r\n    }, SLOW_INTERVAL)\r\n    return () => clearInterval(interval)\r\n  }, [])\r\n\r\n  return <RefreshContext.Provider value={{ slow, fast }}>{children}</RefreshContext.Provider>\r\n}\r\n\r\nexport { RefreshContext, RefreshContextProvider }\r\n","/* eslint-disable no-param-reassign */\r\nimport { createSlice } from \"@reduxjs/toolkit\";\r\nimport farmsConfig from \"config/constants/farms\";\r\nimport BigNumber from \"bignumber.js\";\r\nimport fetchFarms from \"./fetchFarms\";\r\n\r\nimport {\r\n  fetchFarmUserEarnings,\r\n  fetchFarmUserAllowances,\r\n  fetchFarmUserTokenBalances,\r\n  fetchFarmUserStakedBalances,\r\n} from \"./fetchFarmUser\";\r\nimport { FarmsState, Farm } from \"../types\";\r\n\r\nconst initialState: FarmsState = {\r\n  data: [...farmsConfig],\r\n  rewardTokenPerBlock: \"0\",\r\n};\r\n\r\nexport const farmsSlice = createSlice({\r\n  name: \"Farms\",\r\n  initialState,\r\n  reducers: {\r\n    setFarmsPublicData: (state, action) => {\r\n      const liveFarmsData: Farm[] = action.payload;\r\n      state.data = state.data.map((farm) => {\r\n        const liveFarmData = liveFarmsData.find((f) => f.pid === farm.pid);\r\n        return { ...farm, ...liveFarmData };\r\n      });\r\n    },\r\n    setFarmPublicData: (state, action) => {\r\n      const rewardTokenPerBlock: string = action.payload;\r\n      state.rewardTokenPerBlock = rewardTokenPerBlock;\r\n    },\r\n    setFarmUserData: (state, action) => {\r\n      const { arrayOfUserDataObjects } = action.payload;\r\n      arrayOfUserDataObjects.forEach((userDataEl) => {\r\n        const { index } = userDataEl;\r\n        state.data[index] = { ...state.data[index], userData: userDataEl };\r\n      });\r\n    },\r\n  },\r\n});\r\n\r\n// Actions\r\nexport const { setFarmsPublicData, setFarmUserData, setFarmPublicData } =\r\n  farmsSlice.actions;\r\n\r\n// Thunks\r\n// export const fetchFarmsPublicDataAsync = () => async (dispatch) => {\r\n//   console.log(\"fetchfarmpublicdataasync\");\r\n//   const farms = await fetchFarms();\r\n//   console.log(\"farms fetched public data \", farms);\r\n//   dispatch(setFarmsPublicData(farms));\r\n// };\r\n\r\nexport const fetchFarmPublicDataAsync = (farmContract) => async (dispatch) => {\r\n  const rewardTokenPerBlock = await (\r\n    await farmContract?.methods.rewardTokenPerBlock.call()\r\n  ).call();\r\n  const tokenToString = new BigNumber(rewardTokenPerBlock)\r\n    .div(new BigNumber(10).pow(18))\r\n    .toString();\r\n  dispatch(setFarmPublicData(tokenToString));\r\n};\r\nexport const fetchFarmUserDataAsync = (account) => async (dispatch) => {\r\n  let userFarmAllowances = [];\r\n  let userFarmTokenBalances = [];\r\n  let userStakedBalances = [];\r\n  let userFarmEarnings = [];\r\n  try {\r\n    userFarmAllowances = await fetchFarmUserAllowances(account);\r\n  } catch (e) {\r\n    console.log(\"fetchFarmUserAllowances\", e);\r\n  }\r\n  try {\r\n    userFarmTokenBalances = await fetchFarmUserTokenBalances(account);\r\n  } catch (e) {\r\n    console.log(\"fetchFarmUserTokenBalances\", e);\r\n  }\r\n  try {\r\n    userStakedBalances = await fetchFarmUserStakedBalances(account);\r\n  } catch (e) {\r\n    console.log(\"fetchFarmUserStakedBalances\", e);\r\n  }\r\n  try {\r\n    userFarmEarnings = await fetchFarmUserEarnings(account);\r\n  } catch (e) {\r\n    console.log(\"fetchFarmUserEarnings\", e);\r\n  }\r\n\r\n  const arrayOfUserDataObjects = userFarmAllowances.map(\r\n    (farmAllowance, index) => {\r\n      return {\r\n        index,\r\n        allowance: userFarmAllowances[index],\r\n        tokenBalance: userFarmTokenBalances[index],\r\n        stakedBalance: userStakedBalances[index],\r\n        earnings: userFarmEarnings[index],\r\n      };\r\n    },\r\n  );\r\n\r\n  dispatch(setFarmUserData({ arrayOfUserDataObjects }));\r\n};\r\n\r\nexport default farmsSlice.reducer;\r\n","/* eslint-disable no-param-reassign */\r\nimport { createSlice } from \"@reduxjs/toolkit\";\r\nimport { farmsV2Config } from \"config/constants/farms\";\r\nimport BigNumber from \"bignumber.js\";\r\nimport { fetchFarmsV2 } from \"./fetchFarmsV2\";\r\n\r\nimport {\r\n  fetchFarmV2UserEarnings,\r\n  fetchFarmV2UserAllowances,\r\n  fetchFarmV2UserTokenBalances,\r\n  fetchFarmV2UserStakedBalances,\r\n  fetchFarmV2UserUnlockTime\r\n} from \"./fetchFarmUserV2\";\r\nimport { FarmsV2State, FarmV2 } from \"../types\";\r\n\r\nconst initialState: FarmsV2State = {\r\n  data: [...farmsV2Config],\r\n  rewardTokenPerBlock: \"0\",\r\n};\r\n\r\nexport const farmsV2Slice = createSlice({\r\n  name: \"FarmsV2\",\r\n  initialState,\r\n  reducers: {\r\n    setFarmsV2PublicData: (state, action) => {\r\n      const liveFarmsData: FarmV2[] = action.payload;\r\n      state.data = state.data.map((farm) => {\r\n        const liveFarmData = liveFarmsData.find(\r\n          (f) => f.lpSymbol === farm.lpSymbol,\r\n        );\r\n        return { ...farm, ...liveFarmData };\r\n      });\r\n    },\r\n    setFarmV2PublicData: (state, action) => {\r\n      const rewardTokenPerBlock: string = action.payload;\r\n      state.rewardTokenPerBlock = rewardTokenPerBlock;\r\n    },\r\n    setFarmV2UserData: (state, action) => {\r\n      const { arrayOfUserDataObjects } = action.payload;\r\n      arrayOfUserDataObjects.forEach((userDataEl) => {\r\n        const { index } = userDataEl;\r\n        state.data[index] = { ...state.data[index], userData: userDataEl };\r\n      });\r\n    },\r\n  },\r\n});\r\n\r\n// Actions\r\nexport const { setFarmsV2PublicData, setFarmV2UserData, setFarmV2PublicData } =\r\n  farmsV2Slice.actions;\r\n\r\n// Thunks\r\nexport const fetchFarmsV2PublicDataAsync = () => async (dispatch) => {\r\n  const farms = await fetchFarmsV2();\r\n  dispatch(setFarmsV2PublicData(farms));\r\n};\r\nexport const fetchFarmV2UserDataAsync = (account) => async (dispatch) => {\r\n  let userFarmV2Allowances = [];\r\n  let userFarmV2TokenBalances = [];\r\n  let userStakedBalances = [];\r\n  let userFarmV2Earnings = [];\r\n  let userFarmV2StakeTime = [];\r\n  try {\r\n    userFarmV2Allowances = await fetchFarmV2UserAllowances(account);\r\n  } catch (e) {\r\n    console.log(\"fetchFarmV2UserAllowances\", e);\r\n  }\r\n  try {\r\n    userFarmV2TokenBalances = await fetchFarmV2UserTokenBalances(account);\r\n  } catch (e) {\r\n    console.log(\"fetchFarmV2UserTokenBalances\", e);\r\n  }\r\n  try {\r\n    userStakedBalances = await fetchFarmV2UserStakedBalances(account);\r\n  } catch (e) {\r\n    console.log(\"fetchFarmV2UserStakedBalances\", e);\r\n    throw e\r\n  }\r\n  try {\r\n    userFarmV2Earnings = await fetchFarmV2UserEarnings(account);\r\n  } catch (e) {\r\n    console.log(\"fetchFarmV2UserEarnings\", e);\r\n  }\r\n  try {\r\n    userFarmV2StakeTime = await fetchFarmV2UserUnlockTime(account)\r\n  } catch (e) {\r\n    console.log(\"fetchFarmV2UserUnlockTime\", e);\r\n  }\r\n\r\n  const arrayOfUserDataObjects = userFarmV2Allowances.map(\r\n    (farmAllowance, index) => {\r\n      return {\r\n        index,\r\n        allowance: userFarmV2Allowances[index],\r\n        tokenBalance: userFarmV2TokenBalances[index],\r\n        stakedBalance: userStakedBalances[index],\r\n        earnings: userFarmV2Earnings[index],\r\n        stakeTime: userFarmV2StakeTime[index],\r\n      };\r\n    },\r\n  );\r\n\r\n  dispatch(setFarmV2UserData({ arrayOfUserDataObjects }));\r\n};\r\n\r\nexport default farmsV2Slice.reducer;\r\n","/* eslint-disable no-param-reassign */\r\nimport { Toast } from '@pancakeswap-libs/uikit'\r\nimport { createSlice, PayloadAction } from '@reduxjs/toolkit'\r\nimport { ToastsState } from '../types'\r\n\r\nconst initialState: ToastsState = {\r\n  data: [],\r\n}\r\n\r\nexport const toastsSlice = createSlice({\r\n  name: 'toasts',\r\n  initialState,\r\n  reducers: {\r\n    push: (state: ToastsState, action: PayloadAction<Toast>) => {\r\n      const { payload } = action\r\n      const toastIndex = state.data.findIndex((toast) => toast.id === action.payload.id)\r\n\r\n      // If id already matches remove it before adding it to the top of the stack\r\n      if (toastIndex >= 0) {\r\n        state.data.splice(toastIndex, 1)\r\n      }\r\n\r\n      state.data.unshift(payload)\r\n    },\r\n    remove: (state: ToastsState, action: PayloadAction<string>) => {\r\n      const toastIndex = state.data.findIndex((toast) => toast.id === action.payload)\r\n\r\n      if (toastIndex >= 0) {\r\n        state.data.splice(toastIndex, 1)\r\n      }\r\n    },\r\n    clear: (state: ToastsState) => {\r\n      state.data = []\r\n    },\r\n  },\r\n})\r\n\r\n// Actions\r\nexport const { clear, remove, push } = toastsSlice.actions\r\n\r\nexport default toastsSlice.reducer\r\n","import { AbiItem } from 'web3-utils'\r\nimport poolsConfig from 'config/constants/pools'\r\nimport masterChefABI from 'config/abi/masterchef.json'\r\nimport sousChefABI from 'config/abi/sousChef.json'\r\nimport erc20ABI from 'config/abi/erc20.json'\r\nimport { QuoteToken } from 'config/constants/types'\r\nimport multicall from 'utils/multicall'\r\nimport { getAddress, getMasterChefAddress } from 'utils/addressHelpers'\r\nimport { getWeb3NoAccount } from 'utils/web3'\r\nimport BigNumber from 'bignumber.js'\r\n\r\n// Pool 0, Cake / Cake is a different kind of contract (master chef)\r\n// BNB pools use the native BNB token (wrapping ? unwrapping is done at the contract level)\r\nconst nonBnbPools = poolsConfig.filter((p) => p.stakingTokenName !== QuoteToken.ETH)\r\nconst bnbPools = poolsConfig.filter((p) => p.stakingTokenName === QuoteToken.ETH)\r\nconst nonMasterPools = poolsConfig.filter((p) => p.sousId !== 0)\r\nconst web3 = getWeb3NoAccount()\r\nconst masterChefContract = new web3.eth.Contract((masterChefABI as unknown) as AbiItem, getMasterChefAddress())\r\n\r\nexport const fetchPoolsAllowance = async (account) => {\r\n  const calls = nonBnbPools.map((p) => ({\r\n    address: p.stakingTokenAddress,\r\n    name: 'allowance',\r\n    params: [account, getAddress(p.contractAddress)],\r\n  }))\r\n\r\n  const allowances = await multicall(erc20ABI, calls)\r\n  return nonBnbPools.reduce(\r\n    (acc, pool, index) => ({ ...acc, [pool.sousId]: new BigNumber(allowances[index]).toJSON() }),\r\n    {},\r\n  )\r\n}\r\n\r\nexport const fetchUserBalances = async (account) => {\r\n  // Non BNB pools\r\n  const calls = nonBnbPools.map((p) => ({\r\n    address: p.stakingTokenAddress,\r\n    name: 'balanceOf',\r\n    params: [account],\r\n  }))\r\n  const tokenBalancesRaw = await multicall(erc20ABI, calls)\r\n  const tokenBalances = nonBnbPools.reduce(\r\n    (acc, pool, index) => ({ ...acc, [pool.sousId]: new BigNumber(tokenBalancesRaw[index]).toJSON() }),\r\n    {},\r\n  )\r\n\r\n  // BNB pools\r\n  const bnbBalance = await web3.eth.getBalance(account)\r\n  const bnbBalances = bnbPools.reduce(\r\n    (acc, pool) => ({ ...acc, [pool.sousId]: new BigNumber(bnbBalance).toJSON() }),\r\n    {},\r\n  )\r\n\r\n  return { ...tokenBalances, ...bnbBalances }\r\n}\r\n\r\nexport const fetchUserStakeBalances = async (account) => {\r\n  const calls = nonMasterPools.map((p) => ({\r\n    address: getAddress(p.contractAddress),\r\n    name: 'userInfo',\r\n    params: [account],\r\n  }))\r\n  const userInfo = await multicall(sousChefABI, calls)\r\n  const stakedBalances = nonMasterPools.reduce(\r\n    (acc, pool, index) => ({\r\n      ...acc,\r\n      [pool.sousId]: new BigNumber(userInfo[index].amount._hex).toJSON(),\r\n    }),\r\n    {},\r\n  )\r\n\r\n  // Cake / Cake pool\r\n  const { amount: masterPoolAmount } = await masterChefContract.methods.userInfo('0', account).call()\r\n\r\n  return { ...stakedBalances, 0: new BigNumber(masterPoolAmount).toJSON() }\r\n}\r\n\r\nexport const fetchUserPendingRewards = async (account) => {\r\n  const calls = nonMasterPools.map((p) => ({\r\n    address: getAddress(p.contractAddress),\r\n    name: 'pendingReward',\r\n    params: [account],\r\n  }))\r\n  const res = await multicall(sousChefABI, calls)\r\n  const pendingRewards = nonMasterPools.reduce(\r\n    (acc, pool, index) => ({\r\n      ...acc,\r\n      [pool.sousId]: new BigNumber(res[index]).toJSON(),\r\n    }),\r\n    {},\r\n  )\r\n\r\n  // Cake / Cake pool\r\n  const pendingReward = await masterChefContract.methods.pendingRewardToken('0', account).call()\r\n\r\n  return { ...pendingRewards, 0: new BigNumber(pendingReward).toJSON() }\r\n}\r\n","/* eslint-disable no-param-reassign */\r\nimport { createSlice } from '@reduxjs/toolkit'\r\nimport poolsConfig from 'config/constants/pools'\r\nimport { fetchPoolsBlockLimits, fetchPoolsTotalStatking } from './fetchPools'\r\nimport {\r\n  fetchPoolsAllowance,\r\n  fetchUserBalances,\r\n  fetchUserStakeBalances,\r\n  fetchUserPendingRewards,\r\n} from './fetchPoolsUser'\r\nimport { PoolsState, Pool } from '../types'\r\n\r\nconst initialState: PoolsState = { data: [...poolsConfig] }\r\n\r\nexport const PoolsSlice = createSlice({\r\n  name: 'Pools',\r\n  initialState,\r\n  reducers: {\r\n    setPoolsPublicData: (state, action) => {\r\n      const livePoolsData: Pool[] = action.payload\r\n      state.data = state.data.map((pool) => {\r\n        const livePoolData = livePoolsData.find((entry) => entry.sousId === pool.sousId)\r\n        return { ...pool, ...livePoolData }\r\n      })\r\n    },\r\n    setPoolsUserData: (state, action) => {\r\n      const userData = action.payload\r\n      state.data = state.data.map((pool) => {\r\n        const userPoolData = userData.find((entry) => entry.sousId === pool.sousId)\r\n        return { ...pool, userData: userPoolData }\r\n      })\r\n    },\r\n    updatePoolsUserData: (state, action) => {\r\n      const { field, value, sousId } = action.payload\r\n      const index = state.data.findIndex((p) => p.sousId === sousId)\r\n      state.data[index] = { ...state.data[index], userData: { ...state.data[index].userData, [field]: value } }\r\n    },\r\n  },\r\n})\r\n\r\n// Actions\r\nexport const { setPoolsPublicData, setPoolsUserData, updatePoolsUserData } = PoolsSlice.actions\r\n\r\n// Thunks\r\nexport const fetchPoolsPublicDataAsync = () => async (dispatch) => {\r\n  const blockLimits = await fetchPoolsBlockLimits()\r\n  const totalStakings = await fetchPoolsTotalStatking()\r\n\r\n  const liveData = poolsConfig.map((pool) => {\r\n    const blockLimit = blockLimits.find((entry) => entry.sousId === pool.sousId)\r\n    const totalStaking = totalStakings.find((entry) => entry.sousId === pool.sousId)\r\n    return {\r\n      ...blockLimit,\r\n      ...totalStaking,\r\n    }\r\n  })\r\n\r\n  dispatch(setPoolsPublicData(liveData))\r\n}\r\n\r\nexport const fetchPoolsUserDataAsync = (account) => async (dispatch) => {\r\n  const allowances = await fetchPoolsAllowance(account)\r\n  const stakingTokenBalances = await fetchUserBalances(account)\r\n  const stakedBalances = await fetchUserStakeBalances(account)\r\n  const pendingRewards = await fetchUserPendingRewards(account)\r\n\r\n  const userData = poolsConfig.map((pool) => ({\r\n    sousId: pool.sousId,\r\n    allowance: allowances[pool.sousId],\r\n    stakingTokenBalance: stakingTokenBalances[pool.sousId],\r\n    stakedBalance: stakedBalances[pool.sousId],\r\n    pendingReward: pendingRewards[pool.sousId],\r\n  }))\r\n\r\n  dispatch(setPoolsUserData(userData))\r\n}\r\n\r\nexport const updateUserAllowance = (sousId: string, account: string) => async (dispatch) => {\r\n  const allowances = await fetchPoolsAllowance(account)\r\n  dispatch(updatePoolsUserData({ sousId, field: 'allowance', value: allowances[sousId] }))\r\n}\r\n\r\nexport const updateUserBalance = (sousId: string, account: string) => async (dispatch) => {\r\n  const tokenBalances = await fetchUserBalances(account)\r\n  dispatch(updatePoolsUserData({ sousId, field: 'stakingTokenBalance', value: tokenBalances[sousId] }))\r\n}\r\n\r\nexport const updateUserStakedBalance = (sousId: string, account: string) => async (dispatch) => {\r\n  const stakedBalances = await fetchUserStakeBalances(account)\r\n  dispatch(updatePoolsUserData({ sousId, field: 'stakedBalance', value: stakedBalances[sousId] }))\r\n}\r\n\r\nexport const updateUserPendingReward = (sousId: string, account: string) => async (dispatch) => {\r\n  const pendingRewards = await fetchUserPendingRewards(account)\r\n  dispatch(updatePoolsUserData({ sousId, field: 'pendingReward', value: pendingRewards[sousId] }))\r\n}\r\n\r\nexport default PoolsSlice.reducer\r\n","import { Team } from './types'\r\n\r\nconst teams: Team[] = [\r\n  {\r\n    id: 1,\r\n    name: 'Syrup Storm',\r\n    description: \"The storm's a-comin! Watch out! These bulls are stampeding in a syrupy surge!\",\r\n    images: {\r\n      lg: 'syrup-storm-lg.png',\r\n      md: 'syrup-storm-md.png',\r\n      sm: 'syrup-storm-sm.png',\r\n      alt: 'syrup-storm-alt.png',\r\n      ipfs: 'https://gateway.pinata.cloud/ipfs/QmXKzSojwzYjtDCVgR6mVx7w7DbyYpS7zip4ovJB9fQdMG/syrup-storm.png',\r\n    },\r\n    background: 'syrup-storm-bg.svg',\r\n    textColor: '#191326',\r\n    users: 0,\r\n    points: 0,\r\n  },\r\n  {\r\n    id: 2,\r\n    name: 'Fearsome Flippers',\r\n    description: \"The flippening is coming. Don't get in these bunnies' way, or you'll get flipped too!\",\r\n    images: {\r\n      lg: 'fearsome-flippers-lg.png',\r\n      md: 'fearsome-flippers-md.png',\r\n      sm: 'fearsome-flippers-sm.png',\r\n      alt: 'fearsome-flippers-alt.png',\r\n      ipfs: 'https://gateway.pinata.cloud/ipfs/QmXKzSojwzYjtDCVgR6mVx7w7DbyYpS7zip4ovJB9fQdMG/fearsome-flippers.png',\r\n    },\r\n    background: 'fearsome-flippers-bg.svg',\r\n    textColor: '#FFFFFF',\r\n    users: 0,\r\n    points: 0,\r\n  },\r\n  {\r\n    id: 3,\r\n    name: 'Chaotic Cakers',\r\n    description: 'Can you stand the heat? Stay out of the kitchen or you might get burned to a crisp!',\r\n    images: {\r\n      lg: 'chaotic-cakers-lg.png',\r\n      md: 'chaotic-cakers-md.png',\r\n      sm: 'chaotic-cakers-sm.png',\r\n      alt: 'chaotic-cakers-alt.png',\r\n      ipfs: 'https://gateway.pinata.cloud/ipfs/QmXKzSojwzYjtDCVgR6mVx7w7DbyYpS7zip4ovJB9fQdMG/chaotic-cakers.png',\r\n    },\r\n    background: 'chaotic-cakers-bg.svg',\r\n    textColor: '#191326',\r\n    users: 0,\r\n    points: 0,\r\n  },\r\n]\r\n\r\nexport default teams\r\n","/* eslint-disable no-param-reassign */\r\nimport { createSlice, PayloadAction } from '@reduxjs/toolkit'\r\nimport { ProfileState } from 'state/types'\r\nimport getProfile, { GetProfileResponse } from './getProfile'\r\n\r\nconst initialState: ProfileState = {\r\n  isInitialized: false,\r\n  isLoading: true,\r\n  hasRegistered: false,\r\n  data: null,\r\n}\r\n\r\nexport const profileSlice = createSlice({\r\n  name: 'profile',\r\n  initialState,\r\n  reducers: {\r\n    profileFetchStart: (state) => {\r\n      state.isLoading = true\r\n    },\r\n    profileFetchSucceeded: (state, action: PayloadAction<GetProfileResponse>) => {\r\n      const { profile, hasRegistered } = action.payload\r\n\r\n      return {\r\n        isInitialized: true,\r\n        isLoading: false,\r\n        hasRegistered,\r\n        data: profile,\r\n      }\r\n    },\r\n    profileFetchFailed: (state) => {\r\n      state.isLoading = false\r\n      state.isInitialized = true\r\n    },\r\n    addPoints: (state, action: PayloadAction<number>) => {\r\n      state.data.points += action.payload\r\n    },\r\n  },\r\n})\r\n\r\n// Actions\r\nexport const { profileFetchStart, profileFetchSucceeded, profileFetchFailed, addPoints } = profileSlice.actions\r\n\r\n// Thunks\r\nexport const fetchProfile = (address: string) => async (dispatch) => {\r\n  try {\r\n    dispatch(profileFetchStart())\r\n    const response = await getProfile(address)\r\n    dispatch(profileFetchSucceeded(response))\r\n  } catch (error) {\r\n    dispatch(profileFetchFailed())\r\n  }\r\n}\r\n\r\nexport default profileSlice.reducer\r\n","import merge from 'lodash/merge'\r\nimport teamsList from 'config/constants/teams'\r\nimport { getProfileContract } from 'utils/contractHelpers'\r\nimport { Team } from 'config/constants/types'\r\nimport makeBatchRequest from 'utils/makeBatchRequest'\r\nimport { TeamsById, TeamResponse } from 'state/types'\r\n\r\nconst profileContract = getProfileContract()\r\n\r\nexport const getTeam = async (teamId: number): Promise<Team> => {\r\n  try {\r\n    const {\r\n      0: teamName,\r\n      2: numberUsers,\r\n      3: numberPoints,\r\n      4: isJoinable,\r\n    } = await profileContract.methods.getTeamProfile(teamId).call()\r\n    const staticTeamInfo = teamsList.find((staticTeam) => staticTeam.id === teamId)\r\n\r\n    return merge({}, staticTeamInfo, {\r\n      isJoinable,\r\n      name: teamName,\r\n      users: numberUsers,\r\n      points: numberPoints,\r\n    })\r\n  } catch (error) {\r\n    return null\r\n  }\r\n}\r\n\r\n/**\r\n * Gets on-chain data and merges it with the existing static list of teams\r\n */\r\nexport const getTeams = async (): Promise<TeamsById> => {\r\n  try {\r\n    const teamsById = teamsList.reduce((accum, team) => {\r\n      return {\r\n        ...accum,\r\n        [team.id]: team,\r\n      }\r\n    }, {})\r\n    const nbTeams = await profileContract.methods.numberTeams().call()\r\n    const calls = []\r\n\r\n    for (let i = 1; i <= nbTeams; i++) {\r\n      calls.push(profileContract.methods.getTeamProfile(i).call)\r\n    }\r\n\r\n    const teamData = (await makeBatchRequest(calls)) as TeamResponse[]\r\n    const onChainTeamData = teamData.reduce((accum, team, index) => {\r\n      const { 0: teamName, 2: numberUsers, 3: numberPoints, 4: isJoinable } = team\r\n\r\n      return {\r\n        ...accum,\r\n        [index + 1]: {\r\n          name: teamName,\r\n          users: Number(numberUsers),\r\n          points: Number(numberPoints),\r\n          isJoinable,\r\n        },\r\n      }\r\n    }, {})\r\n\r\n    return merge({}, teamsById, onChainTeamData)\r\n  } catch (error) {\r\n    return null\r\n  }\r\n}\r\n","import Cookies from 'js-cookie'\r\nimport { getProfileContract, getPancakeRabbitContract } from 'utils/contractHelpers'\r\nimport { Nft } from 'config/constants/types'\r\nimport { Profile } from 'state/types'\r\nimport { getTeam } from 'state/teams/helpers'\r\nimport nfts from 'config/constants/nfts'\r\nimport { transformProfileResponse } from './helpers'\r\n\r\nconst profileContract = getProfileContract()\r\nconst rabbitContract = getPancakeRabbitContract()\r\nconst profileApi = process.env.REACT_APP_API_PROFILE\r\n\r\nexport interface GetProfileResponse {\r\n  hasRegistered: boolean\r\n  profile?: Profile\r\n}\r\n\r\nconst getUsername = async (address: string): Promise<string> => {\r\n  try {\r\n    const response = await fetch(`${profileApi}/api/users/${address}`)\r\n\r\n    if (!response.ok) {\r\n      return ''\r\n    }\r\n\r\n    const { username = '' } = await response.json()\r\n\r\n    return username\r\n  } catch (error) {\r\n    return ''\r\n  }\r\n}\r\n\r\nconst getProfile = async (address: string): Promise<GetProfileResponse> => {\r\n  try {\r\n    const hasRegistered = (await profileContract.methods.hasRegistered(address).call()) as boolean\r\n\r\n    if (!hasRegistered) {\r\n      return { hasRegistered, profile: null }\r\n    }\r\n\r\n    const profileResponse = await profileContract.methods.getUserProfile(address).call()\r\n    const { userId, points, teamId, tokenId, nftAddress, isActive } = transformProfileResponse(profileResponse)\r\n    const team = await getTeam(teamId)\r\n    const username = await getUsername(address)\r\n\r\n    // If the profile is not active the tokenId returns 0, which is still a valid token id\r\n    // so only fetch the nft data if active\r\n    let nft: Nft\r\n    if (isActive) {\r\n      const bunnyId = await rabbitContract.methods.getBunnyId(tokenId).call()\r\n      nft = nfts.find((nftItem) => nftItem.bunnyId === Number(bunnyId))\r\n\r\n      // Save the preview image in a cookie so it can be used on the exchange\r\n      Cookies.set(\r\n        `profile_${address}`,\r\n        {\r\n          username,\r\n          avatar: `https://pancakeswap.finance/images/nfts/${nft.images.sm}`,\r\n        },\r\n        { domain: 'pancakeswap.finance', secure: true, expires: 30 },\r\n      )\r\n    }\r\n\r\n    const profile = {\r\n      userId,\r\n      points,\r\n      teamId,\r\n      tokenId,\r\n      username,\r\n      nftAddress,\r\n      isActive,\r\n      nft,\r\n      team,\r\n    } as Profile\r\n\r\n    return { hasRegistered, profile }\r\n  } catch (error) {\r\n    return null\r\n  }\r\n}\r\n\r\nexport default getProfile\r\n","/* eslint-disable no-param-reassign */\r\nimport { createSlice, PayloadAction } from '@reduxjs/toolkit'\r\nimport teamsList from 'config/constants/teams'\r\nimport { Team } from 'config/constants/types'\r\nimport { TeamsById, TeamsState } from '../types'\r\nimport { getTeam, getTeams } from './helpers'\r\n\r\nconst teamsById: TeamsById = teamsList.reduce((accum, team) => {\r\n  return {\r\n    ...accum,\r\n    [team.id]: team,\r\n  }\r\n}, {})\r\n\r\nconst initialState: TeamsState = {\r\n  isInitialized: false,\r\n  isLoading: true,\r\n  data: teamsById,\r\n}\r\n\r\nexport const teamsSlice = createSlice({\r\n  name: 'teams',\r\n  initialState,\r\n  reducers: {\r\n    fetchStart: (state) => {\r\n      state.isLoading = true\r\n    },\r\n    fetchFailed: (state) => {\r\n      state.isLoading = false\r\n      state.isInitialized = true\r\n    },\r\n    teamFetchSucceeded: (state, action: PayloadAction<Team>) => {\r\n      state.isInitialized = true\r\n      state.isLoading = false\r\n      state.data[action.payload.id] = action.payload\r\n    },\r\n    teamsFetchSucceeded: (state, action: PayloadAction<TeamsById>) => {\r\n      state.isInitialized = true\r\n      state.isLoading = false\r\n      state.data = action.payload\r\n    },\r\n  },\r\n})\r\n\r\n// Actions\r\nexport const { fetchStart, teamFetchSucceeded, fetchFailed, teamsFetchSucceeded } = teamsSlice.actions\r\n\r\n// Thunks\r\nexport const fetchTeam = (teamId: number) => async (dispatch) => {\r\n  try {\r\n    dispatch(fetchStart())\r\n    const team = await getTeam(teamId)\r\n    dispatch(teamFetchSucceeded(team))\r\n  } catch (error) {\r\n    dispatch(fetchFailed())\r\n  }\r\n}\r\n\r\nexport const fetchTeams = () => async (dispatch) => {\r\n  try {\r\n    dispatch(fetchStart())\r\n    const teams = await getTeams()\r\n    dispatch(teamsFetchSucceeded(teams))\r\n  } catch (error) {\r\n    dispatch(fetchFailed())\r\n  }\r\n}\r\n\r\nexport default teamsSlice.reducer\r\n","import { createSlice } from '@reduxjs/toolkit'\r\nimport { Block } from '../types'\r\n\r\nconst initialState: Block = { blockNumber: 0 }\r\n\r\nexport const blockSlice = createSlice({\r\n  name: 'Block',\r\n  initialState,\r\n  reducers: {\r\n    setBlock: (_, action) => ({ blockNumber: action.payload }),\r\n  },\r\n})\r\n\r\n// Actions\r\nexport const { setBlock } = blockSlice.actions\r\n\r\nexport default blockSlice.reducer\r\n","import { Campaign } from './types'\r\n\r\n/**\r\n * id: The campaign id (required)\r\n * type: The type of the achievement\r\n * title: A string or an object to be translated.\r\n * Note: If the value is a string it is likely used as data in a translation object\r\n *\r\n * badge: Achievement avatar\r\n */\r\n\r\nconst campaigns: Campaign[] = [\r\n  {\r\n    id: '511080000',\r\n    type: 'ifo',\r\n    title: 'Belt',\r\n    badge: 'ifo-belt.svg',\r\n  },\r\n  {\r\n    id: '511070000',\r\n    type: 'ifo',\r\n    title: 'Yieldwatch',\r\n    badge: 'ifo-watch.svg',\r\n  },\r\n  {\r\n    id: '511060000',\r\n    type: 'ifo',\r\n    title: 'Berry',\r\n    badge: 'ifo-bry.svg',\r\n  },\r\n  {\r\n    id: '511050000',\r\n    type: 'ifo',\r\n    title: 'Soteria',\r\n    badge: 'ifo-wsote.svg',\r\n  },\r\n  {\r\n    id: '511040000',\r\n    type: 'ifo',\r\n    title: 'Helmet',\r\n    badge: 'ifo-helmet.svg',\r\n  },\r\n  {\r\n    id: '511030000',\r\n    type: 'ifo',\r\n    title: 'Tenet',\r\n    badge: 'ifo-ten.svg',\r\n  },\r\n  {\r\n    id: '511020000',\r\n    type: 'ifo',\r\n    title: 'Ditto',\r\n    badge: 'ifo-ditto.svg',\r\n  },\r\n  {\r\n    id: '511010000',\r\n    type: 'ifo',\r\n    title: 'Blink',\r\n    badge: 'ifo-blk.svg',\r\n  },\r\n]\r\n\r\n/**\r\n * Transform the campaign config into a map. Keeps the config the same\r\n * as the others and allows easy access to a campaign by id\r\n */\r\nexport const campaignMap = new Map<string, Campaign>()\r\n\r\ncampaigns.forEach((campaign) => {\r\n  campaignMap.set(campaign.id, campaign)\r\n})\r\n\r\nexport default campaigns\r\n","/* eslint-disable no-param-reassign */\r\nimport { toastTypes } from '@pancakeswap-libs/uikit'\r\nimport { createSlice, Dispatch, PayloadAction } from '@reduxjs/toolkit'\r\nimport { kebabCase } from 'lodash'\r\nimport { push } from 'state/toasts'\r\nimport { AchievementState, Achievement } from '../types'\r\nimport { getAchievements } from './helpers'\r\n\r\nconst initialState: AchievementState = {\r\n  data: [],\r\n}\r\n\r\nexport const achievementSlice = createSlice({\r\n  name: 'achievements',\r\n  initialState,\r\n  reducers: {\r\n    addAchievement: (state, action: PayloadAction<Achievement>) => {\r\n      state.data.push(action.payload)\r\n    },\r\n    addAchievements: (state, action: PayloadAction<Achievement[]>) => {\r\n      state.data.concat(action.payload)\r\n    },\r\n    setAchievements: (state, action: PayloadAction<Achievement[]>) => {\r\n      state.data = action.payload\r\n    },\r\n    clearAchievements: (state) => {\r\n      state.data = []\r\n    },\r\n  },\r\n})\r\n\r\n// Actions\r\nexport const { addAchievement, addAchievements, setAchievements, clearAchievements } = achievementSlice.actions\r\n\r\n// Thunks\r\nexport const fetchAchievements = (account: string) => async (dispatch: Dispatch) => {\r\n  try {\r\n    const achievements = await getAchievements(account)\r\n    dispatch(setAchievements(achievements))\r\n  } catch (error) {\r\n    console.error(error)\r\n    const title = 'Error fetching achievements'\r\n    dispatch(push({ id: kebabCase(title), type: toastTypes.DANGER, title }))\r\n  }\r\n}\r\n\r\nexport default achievementSlice.reducer\r\n","import { useEffect, useMemo } from \"react\";\r\nimport BigNumber from \"bignumber.js\";\r\nimport { kebabCase } from \"lodash\";\r\nimport { useWeb3React } from \"@web3-react/core\";\r\nimport { Toast, toastTypes } from \"@pancakeswap-libs/uikit\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { Team } from \"config/constants/types\";\r\nimport { getWeb3NoAccount } from \"utils/web3\";\r\nimport useRefresh from \"hooks/useRefresh\";\r\nimport { useMasterchef } from \"hooks/useContract\";\r\nimport {\r\n  // fetchFarmsPublicDataAsync,\r\n  // fetchFarmPublicDataAsync,\r\n  // fetchPoolsPublicDataAsync,\r\n  fetchPoolsUserDataAsync,\r\n  fetchFarmsV2PublicDataAsync,\r\n  push as pushToast,\r\n  remove as removeToast,\r\n  clear as clearToast,\r\n  setBlock,\r\n} from \"./actions\";\r\nimport {\r\n  State,\r\n  Farm,\r\n  FarmV2,\r\n  Pool,\r\n  Block,\r\n  ProfileState,\r\n  TeamsState,\r\n  AchievementState,\r\n  PriceState,\r\n} from \"./types\";\r\nimport { fetchProfile } from \"./profile\";\r\nimport { fetchTeam, fetchTeams } from \"./teams\";\r\nimport { fetchAchievements } from \"./achievements\";\r\n// import { fetchPrices } from \"./prices\";\r\nimport useGetPriceData from \"../components/Menu/getPrice\";\r\n\r\nconst ZERO = new BigNumber(0);\r\n\r\nexport const useFetchPublicData = () => {\r\n  const dispatch = useDispatch();\r\n  const { slowRefresh } = useRefresh();\r\n  const farmContract = useMasterchef();\r\n  useEffect(() => {\r\n    // TOBY TODO ENABLE THIS\r\n    // dispatch(fetchFarmsPublicDataAsync());\r\n    // dispatch(fetchFarmPublicDataAsync(farmContract));\r\n    // dispatch(fetchPoolsPublicDataAsync());\r\n    dispatch(fetchFarmsV2PublicDataAsync());\r\n  }, [dispatch, slowRefresh, farmContract]);\r\n\r\n  useEffect(() => {\r\n    const web3 = getWeb3NoAccount();\r\n    const interval = setInterval(async () => {\r\n      const blockNumber = await web3.eth.getBlockNumber();\r\n      dispatch(setBlock(blockNumber));\r\n    }, 60000);\r\n\r\n    return () => clearInterval(interval);\r\n  }, [dispatch]);\r\n};\r\n\r\n// Farms\r\n// export const useFarms = (): Farm[] => {\r\n//   const farms = useSelector((state: State) => state.farms.data);\r\n//   return farms;\r\n// };\r\n\r\n// export const useFarmFromPid = (pid): Farm => {\r\n//   const farm = useSelector((state: State) =>\r\n//     state.farms.data.find((f) => f.pid === pid),\r\n//   );\r\n//   return farm;\r\n// };\r\n\r\nexport const useFarmCakePerBlock = (): string => {\r\n  const cakePerBlock = useSelector(\r\n    (state: State) => state.farmsV2.rewardTokenPerBlock,\r\n  );\r\n  return cakePerBlock;\r\n};\r\n\r\nexport const useFarmFromSymbol = (lpSymbol: string): FarmV2 => {\r\n  const farmV2 = useSelector((state: State) =>\r\n    state.farmsV2.data.find((f) => f.lpSymbol === lpSymbol),\r\n  );\r\n  return farmV2;\r\n};\r\n\r\n// export const useFarmUser = (pid) => {\r\n//   const farm = useFarmFromPid(pid);\r\n\r\n//   return {\r\n//     allowance: farm.userData\r\n//       ? new BigNumber(farm.userData.allowance)\r\n//       : new BigNumber(0),\r\n//     tokenBalance: farm.userData\r\n//       ? new BigNumber(farm.userData.tokenBalance)\r\n//       : new BigNumber(0),\r\n//     stakedBalance: farm.userData\r\n//       ? new BigNumber(farm.userData.stakedBalance)\r\n//       : new BigNumber(0),\r\n//     earnings: farm.userData\r\n//       ? new BigNumber(farm.userData.earnings)\r\n//       : new BigNumber(0),\r\n//   };\r\n// };\r\n\r\nexport const useFarmV2FromSymbol = (\r\n  lpSymbol: string,\r\n): { farm: FarmV2; index: number } => {\r\n  const index = useSelector((state: State) =>\r\n    state.farmsV2.data.findIndex((f) => f.lpSymbol === lpSymbol),\r\n  );\r\n  const farm = useSelector((state: State) => {\r\n    return state.farmsV2.data[index];\r\n  });\r\n  return { farm, index };\r\n};\r\n\r\nexport const useFarmsV2 = (): FarmV2[] => {\r\n  const farms = useSelector((state: State) => state.farmsV2.data);\r\n  return farms;\r\n};\r\n\r\nexport const useFarmV2FromIndex = (index): FarmV2 => {\r\n  const farm = useSelector((state: State) => state.farmsV2.data[index]);\r\n  return farm;\r\n};\r\n\r\nexport const useFarmV2User = (index) => {\r\n  const farm = useFarmV2FromIndex(index);\r\n\r\n  return {\r\n    allowance: farm.userData\r\n      ? new BigNumber(farm.userData.allowance)\r\n      : new BigNumber(0),\r\n    tokenBalance: farm.userData\r\n      ? new BigNumber(farm.userData.tokenBalance)\r\n      : new BigNumber(0),\r\n    stakedBalance: farm.userData\r\n      ? new BigNumber(farm.userData.stakedBalance)\r\n      : new BigNumber(0),\r\n    earnings: farm.userData\r\n      ? new BigNumber(farm.userData.earnings)\r\n      : new BigNumber(0),\r\n    stakeTime: farm.userData\r\n      ? new BigNumber(farm.userData.stakeTime)\r\n      : new BigNumber(0),\r\n  };\r\n};\r\n\r\n// Pools\r\nexport const usePools = (account): Pool[] => {\r\n  const { fastRefresh } = useRefresh();\r\n  const dispatch = useDispatch();\r\n  useEffect(() => {\r\n    if (account) {\r\n      dispatch(fetchPoolsUserDataAsync(account));\r\n    }\r\n  }, [account, dispatch, fastRefresh]);\r\n\r\n  const pools = useSelector((state: State) => state.pools.data);\r\n  return pools;\r\n};\r\n\r\nexport const usePoolFromPid = (sousId): Pool => {\r\n  const pool = useSelector((state: State) =>\r\n    state.pools.data.find((p) => p.sousId === sousId),\r\n  );\r\n  return pool;\r\n};\r\n\r\n// Prices\r\nexport const usePriceBnbBusd = (): BigNumber => {\r\n  // const pid = 2 // BUSD-BNB LP\r\n  // @ts-ignore\r\n  const priceData = useGetPriceData();\r\n  // @ts-ignore\r\n  const priceData2 = new BigNumber(priceData);\r\n\r\n  return priceData2;\r\n};\r\n\r\nexport const usePriceCakeBusd = (): BigNumber => {\r\n  // const pid = 1 // XPLAY-BNB LP\r\n  let priceData = useGetPriceData();\r\n  console.log(\"priceData\", priceData)\r\n  // @ts-ignore\r\n  priceData = new BigNumber(priceData);\r\n  const farm = useFarmV2FromIndex(0);\r\n  //  @ts-ignore\r\n  const CakeUSD = farm.tokenPriceVsQuote\r\n    ? (priceData as any).times(farm.tokenPriceVsQuote)\r\n    : ZERO;\r\n  return CakeUSD;\r\n};\r\n\r\nexport const usePriceX2PBusd = (): BigNumber => {\r\n  // const pid = 1 // XPLAY-BNB LP\r\n  const pid = 2;\r\n  let priceData = useGetPriceData();\r\n  // @ts-ignore\r\n  priceData = new BigNumber(priceData);\r\n  const farm = useFarmV2FromIndex(0);\r\n  //  @ts-ignore\r\n  const x2pUsd = farm.tokenPriceVsQuote\r\n    ? (priceData as any).times(farm.tokenPriceVsQuote)\r\n    : ZERO;\r\n  return x2pUsd;\r\n};\r\n\r\n// Toasts\r\nexport const useToast = () => {\r\n  const dispatch = useDispatch();\r\n  const helpers = useMemo(() => {\r\n    const push = (toast: Toast) => dispatch(pushToast(toast));\r\n\r\n    return {\r\n      toastError: (title: string, description?: string) => {\r\n        return push({\r\n          id: kebabCase(title),\r\n          type: toastTypes.DANGER,\r\n          title,\r\n          description,\r\n        });\r\n      },\r\n      toastInfo: (title: string, description?: string) => {\r\n        return push({\r\n          id: kebabCase(title),\r\n          type: toastTypes.INFO,\r\n          title,\r\n          description,\r\n        });\r\n      },\r\n      toastSuccess: (title: string, description?: string) => {\r\n        return push({\r\n          id: kebabCase(title),\r\n          type: toastTypes.SUCCESS,\r\n          title,\r\n          description,\r\n        });\r\n      },\r\n      toastWarning: (title: string, description?: string) => {\r\n        return push({\r\n          id: kebabCase(title),\r\n          type: toastTypes.WARNING,\r\n          title,\r\n          description,\r\n        });\r\n      },\r\n      push,\r\n      remove: (id: string) => dispatch(removeToast(id)),\r\n      clear: () => dispatch(clearToast()),\r\n    };\r\n  }, [dispatch]);\r\n\r\n  return helpers;\r\n};\r\n\r\n// Profile\r\n\r\nexport const useFetchProfile = () => {\r\n  const { account } = useWeb3React();\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    dispatch(fetchProfile(account));\r\n  }, [account, dispatch]);\r\n};\r\n\r\nexport const useProfile = () => {\r\n  const { isInitialized, isLoading, data, hasRegistered }: ProfileState =\r\n    useSelector((state: State) => state.profile);\r\n  return {\r\n    profile: data,\r\n    hasProfile: isInitialized && hasRegistered,\r\n    isInitialized,\r\n    isLoading,\r\n  };\r\n};\r\n\r\n// Teams\r\n\r\nexport const useTeam = (id: number) => {\r\n  const team: Team = useSelector((state: State) => state.teams.data[id]);\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    dispatch(fetchTeam(id));\r\n  }, [id, dispatch]);\r\n\r\n  return team;\r\n};\r\n\r\nexport const useTeams = () => {\r\n  const { isInitialized, isLoading, data }: TeamsState = useSelector(\r\n    (state: State) => state.teams,\r\n  );\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    dispatch(fetchTeams());\r\n  }, [dispatch]);\r\n\r\n  return { teams: data, isInitialized, isLoading };\r\n};\r\n\r\n// Achievements\r\n\r\nexport const useFetchAchievements = () => {\r\n  const { account } = useWeb3React();\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    if (account) {\r\n      dispatch(fetchAchievements(account));\r\n    }\r\n  }, [account, dispatch]);\r\n};\r\n\r\nexport const useAchievements = () => {\r\n  const achievements: AchievementState[\"data\"] = useSelector(\r\n    (state: State) => state.achievements.data,\r\n  );\r\n  return achievements;\r\n};\r\n\r\n// Prices\r\n// export const useFetchPriceList = () => {\r\n//   const { slowRefresh } = useRefresh();\r\n//   const dispatch = useDispatch();\r\n\r\n//   useEffect(() => {\r\n//     dispatch(fetchPrices());\r\n//   }, [dispatch, slowRefresh]);\r\n// };\r\n\r\nexport const useGetApiPrices = () => {\r\n  const prices: PriceState[\"data\"] = useSelector(\r\n    (state: State) => state.prices.data,\r\n  );\r\n  return prices;\r\n};\r\n\r\nexport const useGetApiPrice = (token: string) => {\r\n  const prices = useGetApiPrices();\r\n\r\n  if (!prices) {\r\n    return null;\r\n  }\r\n\r\n  return prices[token.toLowerCase()];\r\n};\r\n\r\n// Block\r\nexport const useBlock = (): Block => {\r\n  return useSelector((state: State) => state.block);\r\n};\r\n","import { useCallback } from \"react\";\r\nimport { useWeb3React, UnsupportedChainIdError } from \"@web3-react/core\";\r\nimport { NoEthereumProviderError, UserRejectedRequestError as UserRejectedRequestErrorInjected } from \"@web3-react/injected-connector\";\r\nimport { UserRejectedRequestError as UserRejectedRequestErrorWalletConnect, WalletConnectConnector } from \"@web3-react/walletconnect-connector\";\r\nimport { connectorLocalStorageKey, ConnectorNames } from \"@pancakeswap-libs/uikit\";\r\nimport { useToast } from 'state/hooks'\r\nimport { connectorsByName } from \"utils/connectors\";\r\nimport { setupNetwork } from 'utils/wallet'\r\n\r\nconst useAuth = () => {\r\n  const { activate, deactivate } = useWeb3React();\r\n  const { toastError } = useToast();\r\n\r\n  const login = useCallback((connectorID: ConnectorNames) => {\r\n    // @ts-ignore\r\n    const connector = connectorsByName[connectorID];\r\n    if (connector) {\r\n      activate(connector, async (error: Error) => {\r\n        window.localStorage.removeItem(connectorLocalStorageKey);\r\n        if (error instanceof UnsupportedChainIdError) {\r\n          const hasSetup = await setupNetwork()\r\n            if (hasSetup) {\r\n              activate(connector)\r\n            }\r\n        } else if (error instanceof NoEthereumProviderError) {\r\n          toastError(\"Provider Error\", \"No provider was found\");\r\n        } else if (error instanceof UserRejectedRequestErrorInjected || error instanceof UserRejectedRequestErrorWalletConnect) {\r\n          if (connector instanceof WalletConnectConnector) {\r\n            const walletConnector = connector as WalletConnectConnector;\r\n            walletConnector.walletConnectProvider = null;\r\n          }\r\n          toastError(\"Authorization Error\", \"Please authorize to access your account\");\r\n        } else {\r\n          toastError(error.name, error.message);\r\n        }\r\n      });\r\n    } else {\r\n      toastError(\"Can't find connector\", \"The connector config is wrong\");\r\n    }\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, []);\r\n\r\n  return { login, logout: deactivate };\r\n};\r\n\r\nexport default useAuth;\r\n","import { useEffect } from 'react'\r\nimport { connectorLocalStorageKey, ConnectorNames } from '@pancakeswap-libs/uikit'\r\nimport useAuth from 'hooks/useAuth'\r\n\r\nconst useEagerConnect = () => {\r\n  const { login } = useAuth()\r\n\r\n  useEffect(() => {\r\n    const connectorId = window.localStorage.getItem(connectorLocalStorageKey) as ConnectorNames\r\n\r\n    // Disable eager connect for BSC Wallet. Currently the BSC Wallet extension does not inject BinanceChain\r\n    // into the Window object in time causing it to throw an error\r\n    // TODO: Figure out an elegant way to listen for when the BinanceChain object is ready\r\n    if (connectorId && connectorId !== ConnectorNames.BSC) {\r\n      login(connectorId)\r\n    }\r\n  }, [login])\r\n}\r\n\r\nexport default useEagerConnect\r\n","import React, { Suspense, SuspenseProps } from 'react'\r\n\r\ninterface State {\r\n  hasError: boolean\r\n}\r\n\r\nclass SuspenseWithChunkError extends React.Component<SuspenseProps, State> {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = { hasError: false }\r\n  }\r\n\r\n  static getDerivedStateFromError() {\r\n    // Update state so the next render will show the fallback UI.\r\n    return { hasError: true }\r\n  }\r\n\r\n  componentDidCatch(error) {\r\n    const isJsChunkLoadError = error.name === 'ChunkLoadError'\r\n    const isCssChunkLoadError = error.code === 'CSS_CHUNK_LOAD_FAILED'\r\n    const isChunkLoadError = isJsChunkLoadError || isCssChunkLoadError\r\n\r\n    // Save a flag on the window object indicating that we have already had a chunk error.\r\n    // This prevents infinite reloads\r\n    const isRecoveringFromChunkError = !!window.history.state?.isRecoveringFromChunkError\r\n\r\n    // If was a chunk load error, refresh the page\r\n    if (isChunkLoadError && !isRecoveringFromChunkError) {\r\n      const nextState = { ...window.history.state, isRecoveringFromChunkError: true }\r\n      window.history.replaceState(nextState, '')\r\n      window.location.reload()\r\n      return\r\n    }\r\n\r\n    throw error\r\n  }\r\n\r\n  render() {\r\n    const { hasError } = this.state\r\n    const { fallback } = this.props\r\n\r\n    if (hasError) {\r\n      return fallback\r\n    }\r\n\r\n    return <Suspense {...this.props} />\r\n  }\r\n}\r\n\r\nexport default SuspenseWithChunkError\r\n","import React from 'react'\r\nimport { useSelector } from 'react-redux'\r\nimport { ToastContainer, Toast } from '@pancakeswap-libs/uikit'\r\nimport { useToast } from 'state/hooks'\r\nimport { State } from 'state/types'\r\n\r\nconst ToastListener = () => {\r\n  const toasts: Toast[] = useSelector((state: State) => state.toasts.data)\r\n  const { remove } = useToast()\r\n\r\n  const handleRemove = (id: string) => remove(id)\r\n\r\n  return <ToastContainer toasts={toasts} onRemove={handleRemove} />\r\n}\r\n\r\nexport default ToastListener\r\n","import React from \"react\";\r\nimport styled, { keyframes } from \"styled-components\";\r\nimport Page from \"./layout/Page\";\r\n\r\nconst Wrapper = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  position: fixed;\r\n  top: 0;\r\n  left: 0;\r\n  height: 100vh;\r\n  width: 100vw;\r\n  z-index: 1000;\r\n  background: ${({ theme }) => theme.colors.background};\r\n  overflow:hidden;\r\n`;\r\n\r\nconst LoaderAnimation = keyframes`\r\n{\r\n  0% {\r\n    transform: translate(-50%,-50%) scale(0.1);\r\n    opacity: 0;\r\n  }\r\n  50% {\r\n    opacity: 1;\r\n  }\r\n  100% {\r\n    transform: translate(-50%,-50%) scale(1.2);\r\n    opacity: 0;\r\n  }\r\n\r\n`;\r\nconst spin = keyframes`\r\n  from{\r\n    transform:rotate(0deg)\r\n  }\r\n  to{\r\n    transform:rotate(360deg)\r\n  }\r\n`\r\nconst spinReverse = keyframes`\r\n  from{\r\n    transform:rotate(360deg)\r\n  }\r\n  to{\r\n    transform:rotate(0deg)\r\n  }\r\n`\r\nconst Loader = styled.div`\r\n  width: calc(3.23625vw + 150.86408px);\r\n  height: calc(3.23625vw + 150.86408px);\r\n  position: absolute;\r\n  background: ${({ theme }) => theme.colors.primary};\r\n  display: block;\r\n  border-radius: 50%;\r\n  z-index: 999;\r\n  animation: ${LoaderAnimation} 1.5s ease-out infinite 0s;\r\n  top: 50%;\r\n  left: 50%;\r\n  transform: translate(-50%, -50%);\r\n  transform-origin: center;\r\n`;\r\nconst SVG = styled.svg`\r\n  z-index: 1000;\r\n  width: calc(3.23625vw + 50.86408px);\r\n  height: calc(3.23625vw + 50.86408px);\r\n   path:first-child{\r\n    animation: ${spin} 2s linear infinite;\r\n    transform-origin: center;\r\n   }\r\n   path:nth-child(2){\r\n    animation: ${spinReverse} 2s linear infinite;\r\n    transform-origin: center;\r\n   }\r\n   path:nth-child(3){\r\n    animation: ${spin} 2s linear infinite;\r\n    transform-origin: center;\r\n   }\r\n`;\r\nconst PageLoader: React.FC = () => {\r\n  return (\r\n    <Wrapper>\r\n      <SVG\r\n        version=\"1.1\"\r\n        id=\"L7\"\r\n        xmlns=\"http://www.w3.org/2000/svg\"\r\n        x=\"0px\"\r\n        y=\"0px\"\r\n        viewBox=\"0 0 100 100\"\r\n        enableBackground=\"new 0 0 100 100\"\r\n      >\r\n        <path\r\n          fill=\"#fff\"\r\n          d=\"M31.6,3.5C5.9,13.6-6.6,42.7,3.5,68.4c10.1,25.7,39.2,38.3,64.9,28.1l-3.1-7.9c-21.3,8.4-45.4-2-53.8-23.3\r\n  c-8.4-21.3,2-45.4,23.3-53.8L31.6,3.5z\"\r\n        />\r\n        <path\r\n          fill=\"#fff\"\r\n          d=\"M42.3,39.6c5.7-4.3,13.9-3.1,18.1,2.7c4.3,5.7,3.1,13.9-2.7,18.1l4.1,5.5c8.8-6.5,10.6-19,4.1-27.7\r\n  c-6.5-8.8-19-10.6-27.7-4.1L42.3,39.6z\"\r\n        />\r\n         \r\n        <path\r\n          fill=\"#fff\"\r\n          d=\"M82,35.7C74.1,18,53.4,10.1,35.7,18S10.1,46.6,18,64.3l7.6-3.4c-6-13.5,0-29.3,13.5-35.3s29.3,0,35.3,13.5\r\n  L82,35.7z\"\r\n        />\r\n         \r\n      </SVG>\r\n    </Wrapper>\r\n  );\r\n};\r\n\r\nexport default PageLoader;\r\n","import React, { useEffect,useState, lazy } from \"react\";\nimport { HashRouter, Route, Switch } from \"react-router-dom\";\nimport styled from 'styled-components'\nimport { ResetCSS } from \"@pancakeswap-libs/uikit\";\nimport BigNumber from \"bignumber.js\";\nimport useEagerConnect from \"hooks/useEagerConnect\";\nimport GlobalStyle from \"./style/Global\";\nimport Menu from \"./components/Menu\";\nimport SuspenseWithChunkError from \"./components/SuspenseWithChunkError\";\nimport ToastListener from \"./components/ToastListener\";\nimport PageLoader from \"./components/PageLoader\";\n\n\n\nconst Home = lazy(() => import(\"./views/Home\"));\nconst NotFound = lazy(() => import(\"./views/NotFound\"));\n\nconst AppWrapper = styled.div`\n`\n\nconst BodyWrapper = styled.div`\n  overflow-y: auto;\n  overflow-x: hidden;\n  z-index: 1;\n`\n\n// This config is required for number formating\nBigNumber.config({\n  EXPONENTIAL_AT: 1000,\n  DECIMAL_PLACES: 80,\n});\n\nconst App: React.FC = () => {\n  useEffect(() => {\n    console.warn = () => null;\n  }, []);\n\n  useEagerConnect();\n\n  const [videoPlayed,setVideoPlayed] = useState(false)\n  return (\n    <AppWrapper style={{ overflow: 'hidden' }}>\n    <HashRouter>\n      <ResetCSS />\n\n      <BodyWrapper>\n        <SuspenseWithChunkError fallback={<PageLoader />}>\n          <Switch>\n            <Route path=\"/\" exact>\n              <Home videoPlayed={videoPlayed} setVideoPlayed={setVideoPlayed}/>\n            </Route>\n            <Route component={NotFound} />\n          </Switch>\n        </SuspenseWithChunkError>\n        </BodyWrapper>\n      <ToastListener />\n    </HashRouter>\n    </AppWrapper>\n  );\n};\n\nexport default React.memo(App);\n","import { InjectedConnector } from '@web3-react/injected-connector'\r\nimport { WalletConnectConnector } from '@web3-react/walletconnect-connector'\r\n\r\nimport { ConnectorNames } from '@pancakeswap-libs/uikit'\r\nimport Web3 from 'web3'\r\nimport getNodeUrl from './getRpcUrl'\r\n\r\n\r\nconst rpcUrl = getNodeUrl()\r\nconst chainId = parseInt(process.env.REACT_APP_CHAIN_ID, 1)\r\n\r\nconst injected = new InjectedConnector({ supportedChainIds: [chainId] })\r\n\r\nconst walletconnect = new WalletConnectConnector({\r\n  rpc: { [chainId]: rpcUrl },\r\n  qrcode: true,\r\n  chainId:1,\r\n})\r\n\r\nexport const connectorsByName: { [connectorName in ConnectorNames]: any } = {\r\n  [ConnectorNames.Injected]: injected,\r\n  [ConnectorNames.WalletConnect]: walletconnect,\r\n  [ConnectorNames.BSC]: null,\r\n}\r\n\r\nexport const getLibrary = (provider): Web3 => {\r\n  return provider\r\n}\r\n","export const EN = { code: 'en', language: 'English' }\r\nexport const AR = { code: 'ar', language: 'العربية' }\r\nexport const CA = { code: 'ca', language: 'Català' }\r\nexport const ZHCN = { code: 'zh-CN', language: '简体中文' }\r\nexport const ZHTW = { code: 'zh-TW', language: '繁體中文' }\r\nexport const CS = { code: 'cs', language: 'Čeština' }\r\nexport const DA = { code: 'da', language: 'Dansk' }\r\nexport const DE = { code: 'de', language: 'Deutsch' }\r\nexport const NL = { code: 'nl', language: 'Nederlands' }\r\nexport const FIL = { code: 'fil', language: 'Filipino' }\r\nexport const FI = { code: 'fi', language: 'Suomalainen' }\r\nexport const FR = { code: 'fr', language: 'Français' }\r\nexport const EL = { code: 'el', language: 'Ελληνικά' }\r\nexport const HI = { code: 'hi', language: 'हिंदी' }\r\nexport const HU = { code: 'hu', language: 'Magyar' }\r\nexport const ID = { code: 'id', language: 'Bahasa Indonesia' }\r\nexport const IT = { code: 'it', language: 'Italiano' }\r\nexport const JA = { code: 'ja', language: '日本語' }\r\nexport const KO = { code: 'ko', language: '한국어' }\r\nexport const PTBR = { code: 'pt-BR', language: 'Português' }\r\nexport const RO = { code: 'ro', language: 'Română' }\r\nexport const RU = { code: 'ru', language: 'Русский' }\r\nexport const SR = { code: 'sr', language: 'Српски' }\r\nexport const ESES = { code: 'es-ES', language: 'Español' }\r\nexport const SVSE = { code: 'sv-SE', language: 'Svenska' }\r\nexport const TA = { code: 'ta', language: 'தமிழ்' }\r\nexport const TR = { code: 'tr', language: 'Türkçe' }\r\nexport const UK = { code: 'uk', language: 'Українська' }\r\nexport const VI = { code: 'vi', language: 'Tiếng Việt' }\r\n\r\nexport const allLanguages = [\r\n  EN,\r\n  AR,\r\n  CA,\r\n  ZHCN,\r\n  ZHTW,\r\n  CS,\r\n  DA,\r\n  DE,\r\n  NL,\r\n  FIL,\r\n  FI,\r\n  FR,\r\n  EL,\r\n  HI,\r\n  HU,\r\n  ID,\r\n  IT,\r\n  JA,\r\n  KO,\r\n  PTBR,\r\n  RO,\r\n  RU,\r\n  SR,\r\n  ESES,\r\n  SVSE,\r\n  TA,\r\n  TR,\r\n  UK,\r\n  VI,\r\n]\r\n","import React, { useState, useEffect } from 'react'\r\nimport { StringTranslations } from '@crowdin/crowdin-api-client'\r\nimport { TranslationsContext } from 'contexts/Localisation/translationsContext'\r\nimport { allLanguages, EN } from 'config/localisation/languageCodes'\r\n\r\nconst CACHE_KEY = 'pancakeSwapLanguage'\r\n\r\nexport interface LangType {\r\n  code: string\r\n  language: string\r\n}\r\n\r\nexport interface LanguageState {\r\n  selectedLanguage: LangType\r\n  setSelectedLanguage: (langObject: LangType) => void\r\n  translatedLanguage: LangType\r\n  setTranslatedLanguage: React.Dispatch<React.SetStateAction<LangType>>\r\n}\r\n\r\nconst LanguageContext = React.createContext({\r\n  selectedLanguage: EN,\r\n  setSelectedLanguage: () => undefined,\r\n  translatedLanguage: EN,\r\n  setTranslatedLanguage: () => undefined,\r\n} as LanguageState)\r\n\r\nconst fileId = 8\r\nconst projectId = parseInt(process.env.REACT_APP_CROWDIN_PROJECTID)\r\nconst stringTranslationsApi = new StringTranslations({\r\n  token: process.env.REACT_APP_CROWDIN_APIKEY,\r\n})\r\n\r\nconst fetchTranslationsForSelectedLanguage = (selectedLanguage) => {\r\n  return stringTranslationsApi.listLanguageTranslations(projectId, selectedLanguage.code, undefined, fileId, 200)\r\n}\r\n\r\nconst LanguageContextProvider = ({ children }) => {\r\n  const [selectedLanguage, setSelectedLanguage] = useState<any>(EN)\r\n  const [translatedLanguage, setTranslatedLanguage] = useState<any>(EN)\r\n  const [translations, setTranslations] = useState<Array<any>>([])\r\n\r\n  const getStoredLang = (storedLangCode: string) => {\r\n    return allLanguages.filter((language) => {\r\n      return language.code === storedLangCode\r\n    })[0]\r\n  }\r\n\r\n  useEffect(() => {\r\n    const storedLangCode = localStorage.getItem(CACHE_KEY)\r\n    if (storedLangCode) {\r\n      const storedLang = getStoredLang(storedLangCode)\r\n      setSelectedLanguage(storedLang)\r\n    } else {\r\n      setSelectedLanguage(EN)\r\n    }\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    if (selectedLanguage) {\r\n      fetchTranslationsForSelectedLanguage(selectedLanguage)\r\n        .then((translationApiResponse) => {\r\n          if (translationApiResponse.data.length < 1) {\r\n            setTranslations([])\r\n          } else {\r\n            setTranslations(translationApiResponse.data)\r\n          }\r\n        })\r\n        .then(() => setTranslatedLanguage(selectedLanguage))\r\n        .catch((e) => {\r\n          setTranslations([])\r\n          console.error('Error while loading translations', e)\r\n        })\r\n    }\r\n  }, [selectedLanguage, setTranslations])\r\n\r\n  const handleLanguageSelect = (langObject: LangType) => {\r\n    setSelectedLanguage(langObject)\r\n    localStorage.setItem(CACHE_KEY, langObject.code)\r\n  }\r\n\r\n  return (\r\n    <LanguageContext.Provider\r\n      value={{ selectedLanguage, setSelectedLanguage: handleLanguageSelect, translatedLanguage, setTranslatedLanguage }}\r\n    >\r\n      <TranslationsContext.Provider value={{ translations, setTranslations }}>{children}</TranslationsContext.Provider>\r\n    </LanguageContext.Provider>\r\n  )\r\n}\r\n\r\nexport { LanguageContext, LanguageContextProvider }\r\n","import React, { useState } from \"react\";\r\nimport { ThemeProvider as SCThemeProvider } from \"styled-components\";\r\nimport { light, dark } from \"@pancakeswap-libs/uikit\";\r\n\r\nconst CACHE_KEY = \"IS_DARK\";\r\n\r\nexport interface ThemeContextType {\r\n  isDark: boolean;\r\n  toggleTheme: () => void;\r\n}\r\n\r\nconst ThemeContext = React.createContext<ThemeContextType>({\r\n  isDark: false,\r\n  toggleTheme: () => null,\r\n});\r\nconst modTheme = {\r\n  ...dark,\r\n  colors: {\r\n    ...dark.colors,\r\n    primary: \"#00C4F4\",\r\n    secondary: \"#00C4F4\",\r\n    borderColor: \"#0095ff\",\r\n    background:\"#27262c\",\r\n    textSubtle: \"#00C4F4\",\r\n    text: \"#fff\",\r\n    tertiary: \"#fff\",\r\n    failure: \"#ab3f3d\",\r\n    input: \"#000000b3\",\r\n    success: \"#00C4F4\",\r\n    navBorder: \"#00C4F4\",\r\n  },\r\n  shadows: {\r\n    ...dark.shadows,\r\n    focus: \"0px 0px 0px 1px #00C4F4, 0px 0px 0px 4px #00C4F499;\",\r\n  },\r\n  nav: {\r\n    ...dark.nav,\r\n    background: \"#00C4F4\",\r\n  },\r\n  // tooltip:{\r\n  //   ...dark.tooltip,\r\n  //   background:'red'\r\n  // }\r\n  card: { ...dark.card, background: \"#00C4F4\" },\r\n};\r\n\r\nconst ThemeContextProvider: React.FC = ({ children }) => {\r\n  const [isDark, setIsDark] = useState(() => {\r\n    const isDarkUserSetting = localStorage.getItem(CACHE_KEY);\r\n    return isDarkUserSetting ? JSON.parse(isDarkUserSetting) : false;\r\n  });\r\n\r\n  const toggleTheme = () => {\r\n    setIsDark((prevState: any) => {\r\n      localStorage.setItem(CACHE_KEY, JSON.stringify(!prevState));\r\n      return !prevState;\r\n    });\r\n  };\r\n\r\n  return (\r\n    <ThemeContext.Provider value={{ isDark, toggleTheme }}>\r\n      <SCThemeProvider theme={modTheme}>{children}</SCThemeProvider>\r\n    </ThemeContext.Provider>\r\n  );\r\n};\r\n\r\nexport { ThemeContext, ThemeContextProvider };\r\n","import { configureStore } from '@reduxjs/toolkit'\r\n// import farmsReducer from './farms'\r\nimport farmsV2Reducer from './farmsV2'\r\nimport toastsReducer from './toasts'\r\nimport poolsReducer from './pools'\r\n// import pricesReducer from './prices'\r\nimport profileReducer from './profile'\r\nimport teamsReducer from './teams'\r\nimport achievementsReducer from './achievements'\r\nimport blockReducer from './block'\r\n\r\nexport default configureStore({\r\n  devTools: process.env.NODE_ENV !== 'production',\r\n  reducer: {\r\n    // farms: farmsReducer,\r\n    farmsV2: farmsV2Reducer,\r\n    toasts: toastsReducer,\r\n    pools: poolsReducer,\r\n    // prices: pricesReducer,\r\n    profile: profileReducer,\r\n    teams: teamsReducer,\r\n    achievements: achievementsReducer,\r\n    block: blockReducer,\r\n  },\r\n})\r\n","import React from 'react'\r\nimport { ModalProvider } from '@pancakeswap-libs/uikit'\r\nimport { Web3ReactProvider } from '@web3-react/core'\r\nimport { Provider } from 'react-redux'\r\nimport { getLibrary } from 'utils/web3React'\r\nimport { LanguageContextProvider } from 'contexts/Localisation/languageContext'\r\nimport { ThemeContextProvider } from 'contexts/ThemeContext'\r\nimport { RefreshContextProvider } from 'contexts/RefreshContext'\r\nimport store from 'state'\r\n\r\nconst Providers: React.FC = ({ children }) => {\r\n  return (\r\n    <Web3ReactProvider getLibrary={getLibrary}>\r\n      <Provider store={store}>\r\n        <ThemeContextProvider>\r\n          <LanguageContextProvider>\r\n            <RefreshContextProvider>\r\n              <ModalProvider>{children}</ModalProvider>\r\n            </RefreshContextProvider>\r\n          </LanguageContextProvider>\r\n        </ThemeContextProvider>\r\n      </Provider>\r\n    </Web3ReactProvider>\r\n  )\r\n}\r\n\r\nexport default Providers\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport App from './App'\r\nimport Providers from './Providers'\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Providers>\r\n      <App />\r\n    </Providers>\r\n  </React.StrictMode>,\r\n  document.getElementById('root'),\r\n)\r\n"],"sourceRoot":""}